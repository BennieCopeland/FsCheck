[{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck.html","title":"FsCheck","content":"Arb \nArbPatterns \nCommand \nGen \nGenBuilder \nProp \nPropOperators \nRandom \nRunner \nTypeClass \nArbitrary<'a> \nArbitraryExtensions \nCheck \nCheckExtensions \nCommand<'Actual, 'Model> \nCommandExtensions \nConfig \nConfiguration \nDoNotShrink<'a> \nDoNotSize<'a> \nDontShrink<'a> \nDontSize<'a> \nFixedLengthArray<'a> \nFunction<'a, 'b> \nGen<'a> \nGenExtensions \nHostName \nICommandGenerator<'Actual, 'Model> \nIPv4Address \nIPv6Address \nIRunner \nIntWithMinMax \nInterval \nNegativeInt \nNonEmptyArray<'a> \nNonEmptySet<'a> \nNonEmptyString \nNonNegativeInt \nNonNull<'a> \nNonWhiteSpaceString \nNonZeroInt \nNormalFloat \nOutcome \nPositiveInt \nProperty \nPropertyExtensions \nResult \nRose<'a> \nStringNoNulls \nTestData \nTestResult \nThrowingFunction<'a, 'b> \nWeightAndValue<'a> \nXmlEncodedString"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental.html","title":"FsCheck.Experimental","content":"StateMachine \nDisposeCall<'Actual> \nIOperation \nIOperationResult \nMachine<'Actual, 'Model> \nMachineRun<'Actual, 'Model> \nMethodCall<'Actual> \nNew<'Actual> \nObjectMachine<'Actual> \nObjectMachineModel \nOperation<'Actual, 'Model> \nOperationResult<'a> \nSetup<'Actual, 'Model> \nStateMachineExtensions \nStopOperation<'Actual, 'Model> \nTearDown<'Actual>"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html","title":"Arb","content":"Arb \n \nArb.Default \nDefault \nArb.registerByType \nregisterByType \nArb.register \nregister \nArb.from \nfrom \nArb.generate \ngenerate \nArb.shrink \nshrink \nArb.shrinkNumber \nshrinkNumber \nArb.toGen \ntoGen \nArb.toShrink \ntoShrink \nArb.fromGen \nfromGen \nArb.fromGenShrink \nfromGenShrink \nArb.fromGenShrinkFunc \nfromGenShrinkFunc \nArb.convert \nconvert \nArb.filter \nfilter \nArb.mapFilter \nmapFilter"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#registerByType","title":"Arb.registerByType","content":"Arb.registerByType \nregisterByType \n\nRegister the generators that are static members of the given type.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#register","title":"Arb.register","content":"Arb.register \nregister \n\nRegister the generators that are static members of the type argument.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#from","title":"Arb.from","content":"Arb.from \nfrom \n\nGet the Arbitrary instance for the given type.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#generate","title":"Arb.generate","content":"Arb.generate \ngenerate \n\nReturns a Gen<'Value>\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#shrink","title":"Arb.shrink","content":"Arb.shrink \nshrink \n\nReturns the immediate shrinks for the given value based on its type.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#shrinkNumber","title":"Arb.shrinkNumber","content":"Arb.shrinkNumber \nshrinkNumber \n\nA generic shrinker that should work for most number-like types.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#toGen","title":"Arb.toGen","content":"Arb.toGen \ntoGen \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#toShrink","title":"Arb.toShrink","content":"Arb.toShrink \ntoShrink \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#fromGen","title":"Arb.fromGen","content":"Arb.fromGen \nfromGen \n\n Construct an Arbitrary instance from a generator.\n Shrink is not supported for this type.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#fromGenShrink","title":"Arb.fromGenShrink","content":"Arb.fromGenShrink \nfromGenShrink \n\n Construct an Arbitrary instance from a generator and shrinker.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#fromGenShrinkFunc","title":"Arb.fromGenShrinkFunc","content":"Arb.fromGenShrinkFunc \nfromGenShrinkFunc \n\n Construct an Arbitrary instance from a generator and shrinker.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#convert","title":"Arb.convert","content":"Arb.convert \nconvert \n\nConstruct an Arbitrary instance for a type that can be mapped to and from another type (e.g. a wrapper),\nbased on a Arbitrary instance for the source type and two mapping functions.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#filter","title":"Arb.filter","content":"Arb.filter \nfilter \n\n Return an Arbitrary instance that is a filtered version of an existing arbitrary instance.\n The generator uses Gen.suchThat, and the shrinks are filtered using Seq.filter with the given predicate.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb.html#mapFilter","title":"Arb.mapFilter","content":"Arb.mapFilter \nmapFilter \n\n Return an Arbitrary instance that is a mapped and filtered version of an existing arbitrary instance.\n The generator uses Gen.map with the given mapper and then Gen.suchThat with the given predicate, \n and the shrinks are filtered using Seq.filter with the given predicate.\nThis is sometimes useful if using just a filter would reduce the chance of getting a good value\nfrom the generator - and you can map the value instead. E.g. PositiveInt.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html","title":"Default","content":"Default \n \nDefault.Array \nArray \nDefault.Array2D \nArray2D \nDefault.Arrow \nArrow \nDefault.BigInt \nBigInt \nDefault.Bool \nBool \nDefault.Byte \nByte \nDefault.Char \nChar \nDefault.Complex \nComplex \nDefault.ConsoleKeyInfo \nConsoleKeyInfo \nDefault.Culture \nCulture \nDefault.DateTime \nDateTime \nDefault.DateTimeOffset \nDateTimeOffset \nDefault.Decimal \nDecimal \nDefault.Derive \nDerive \nDefault.Dictionary \nDictionary \nDefault.DoNotShrink \nDoNotShrink \nDefault.DoNotSizeDateTime \nDoNotSizeDateTime \nDefault.DoNotSizeDecimal \nDoNotSizeDecimal \nDefault.DoNotSizeInt16 \nDoNotSizeInt16 \nDefault.DoNotSizeInt32 \nDoNotSizeInt32 \nDefault.DoNotSizeInt64 \nDoNotSizeInt64 \nDefault.DoNotSizeUInt16 \nDoNotSizeUInt16 \nDefault.DoNotSizeUInt32 \nDoNotSizeUInt32 \nDefault.DoNotSizeUInt64 \nDoNotSizeUInt64 \nDefault.DontShrink \nDontShrink \nDefault.DontSizeInt16 \nDontSizeInt16 \nDefault.DontSizeInt32 \nDontSizeInt32 \nDefault.DontSizeInt64 \nDontSizeInt64 \nDefault.DontSizeUInt16 \nDontSizeUInt16 \nDefault.DontSizeUInt32 \nDontSizeUInt32 \nDefault.DontSizeUInt64 \nDontSizeUInt64 \nDefault.FixedLengthArray \nFixedLengthArray \nDefault.Float \nFloat \nDefault.Float32 \nFloat32 \nDefault.FsList \nFsList \nDefault.Fun \nFun \nDefault.Function \nFunction \nDefault.Guid \nGuid \nDefault.HostName \nHostName \nDefault.ICollection \nICollection \nDefault.IDictionary \nIDictionary \nDefault.IList \nIList \nDefault.IPAddress \nIPAddress \nDefault.IPv4Address \nIPv4Address \nDefault.IPv6Address \nIPv6Address \nDefault.Int16 \nInt16 \nDefault.Int32 \nInt32 \nDefault.Int64 \nInt64 \nDefault.IntWithMinMax \nIntWithMinMax \nDefault.Interval \nInterval \nDefault.KeyValuePair \nKeyValuePair \nDefault.List \nList \nDefault.MailAddress \nMailAddress \nDefault.Map \nMap \nDefault.NegativeInt \nNegativeInt \nDefault.NonEmptyArray \nNonEmptyArray \nDefault.NonEmptySet \nNonEmptySet \nDefault.NonEmptyString \nNonEmptyString \nDefault.NonNegativeInt \nNonNegativeInt \nDefault.NonNull \nNonNull \nDefault.NonWhiteSpaceString \nNonWhiteSpaceString \nDefault.NonZeroInt \nNonZeroInt \nDefault.NormalFloat \nNormalFloat \nDefault.Nullable \nNullable \nDefault.Object \nObject \nDefault.Option \nOption \nDefault.PositiveInt \nPositiveInt \nDefault.SByte \nSByte \nDefault.Set \nSet \nDefault.String \nString \nDefault.StringWithoutNullChars \nStringWithoutNullChars \nDefault.SystemAction \nSystemAction \nDefault.SystemAction1 \nSystemAction1 \nDefault.SystemAction2 \nSystemAction2 \nDefault.SystemAction3 \nSystemAction3 \nDefault.SystemFunc \nSystemFunc \nDefault.SystemFunc1 \nSystemFunc1 \nDefault.SystemFunc2 \nSystemFunc2 \nDefault.SystemFunc3 \nSystemFunc3 \nDefault.ThrowingFunction \nThrowingFunction \nDefault.ThrowingFunction \nThrowingFunction \nDefault.TimeSpan \nTimeSpan \nDefault.UInt16 \nUInt16 \nDefault.UInt32 \nUInt32 \nDefault.UInt64 \nUInt64 \nDefault.Unit \nUnit \nDefault.XmlEncodedString \nXmlEncodedString"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Array","title":"Default.Array","content":"Default.Array \nArray \n\nGenerates a rank 1 arrays. \nThe length of the generated array is between 0 and the test size + 1. \nThe sum of the sizes of the elements is equal to the size of the generated array.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Array2D","title":"Default.Array2D","content":"Default.Array2D \nArray2D \n\nGenerate a rank 2, zero based array. \nThe product of the width and the height is between 0 and the test size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Arrow","title":"Default.Arrow","content":"Default.Arrow \nArrow \n\nGenerates function values. Function values can be generated for types 'a->'b where 'b has an Arbitrary instance.\nThere is no shrinking for function values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#BigInt","title":"Default.BigInt","content":"Default.BigInt \nBigInt \n\nGenerates BigInteger values that are between -size and size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Bool","title":"Default.Bool","content":"Default.Bool \nBool \n\nGenerates bool values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Byte","title":"Default.Byte","content":"Default.Byte \nByte \n\nGenerates byte values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Char","title":"Default.Char","content":"Default.Char \nChar \n\nGenerates characters that are between ASCII codes Char.MinValue and 127.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Complex","title":"Default.Complex","content":"Default.Complex \nComplex \n\nGenerates complex values of form {float + i*float}. \nShrinks by removing the imaginary part and shrinking both parts.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#ConsoleKeyInfo","title":"Default.ConsoleKeyInfo","content":"Default.ConsoleKeyInfo \nConsoleKeyInfo \n\nGenerates System.ConsoleKeyInfo values.\nShrinks by reducing number of special key modifiers\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Culture","title":"Default.Culture","content":"Default.Culture \nCulture \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DateTime","title":"Default.DateTime","content":"Default.DateTime \nDateTime \n\nGenerates DateTime values that are between 1900 and 2100. \nA DateTime is shrunk by removing its Kind, millisecond, second, minute and hour components.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DateTimeOffset","title":"Default.DateTimeOffset","content":"Default.DateTimeOffset \nDateTimeOffset \n\nGenerates DateTimeOffset values that are between 1900 and 2100. \n A DateTimeOffset is shrunk first by shrinking its offset, then by removing its second, minute and hour components.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Decimal","title":"Default.Decimal","content":"Default.Decimal \nDecimal \n\nGenerates decimal values that are between -size and size.\nShrinks by yielding zero, abs of the origin and the truncated origin.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Derive","title":"Default.Derive","content":"Default.Derive \nDerive \n\nTry to derive an arbitrary instance for the given type reflectively. \nGenerates and shrinks values for record, union, tuple and enum types.\nAlso generates (but doesn't shrink) values for basic classes \n(i.e. either classes having a single constructor with immutable values  \nor DTO classes with a default constructor and public property setters).\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Dictionary","title":"Default.Dictionary","content":"Default.Dictionary \nDictionary \n\n Generates System.Collections.Generic.Dictionary instances.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DoNotShrink","title":"Default.DoNotShrink","content":"Default.DoNotShrink \nDoNotShrink \n\nOverrides the shrinker of any type to be empty, i.e. not to shrink at all.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DoNotSizeDateTime","title":"Default.DoNotSizeDateTime","content":"Default.DoNotSizeDateTime \nDoNotSizeDateTime \n\nGenerates DateTime values that are unrestricted by size.\nA DateTime is shrunk by removing its Kind, millisecond, second, minute and hour components.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DoNotSizeDecimal","title":"Default.DoNotSizeDecimal","content":"Default.DoNotSizeDecimal \nDoNotSizeDecimal \n\nGenerates decimal values that are unrestricted by size.\nShrinks by yielding zero, abs of the origin and the truncated origin.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DoNotSizeInt16","title":"Default.DoNotSizeInt16","content":"Default.DoNotSizeInt16 \nDoNotSizeInt16 \n\nGenerates int16 values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DoNotSizeInt32","title":"Default.DoNotSizeInt32","content":"Default.DoNotSizeInt32 \nDoNotSizeInt32 \n\nGenerates int32 values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DoNotSizeInt64","title":"Default.DoNotSizeInt64","content":"Default.DoNotSizeInt64 \nDoNotSizeInt64 \n\nGenerates int64 values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DoNotSizeUInt16","title":"Default.DoNotSizeUInt16","content":"Default.DoNotSizeUInt16 \nDoNotSizeUInt16 \n\nGenerates uint16 values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DoNotSizeUInt32","title":"Default.DoNotSizeUInt32","content":"Default.DoNotSizeUInt32 \nDoNotSizeUInt32 \n\nGenerates uint32 values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DoNotSizeUInt64","title":"Default.DoNotSizeUInt64","content":"Default.DoNotSizeUInt64 \nDoNotSizeUInt64 \n\nGenerates uint64 values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DontShrink","title":"Default.DontShrink","content":"Default.DontShrink \nDontShrink \n\nOverrides the shrinker of any type to be empty, i.e. not to shrink at all.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DontSizeInt16","title":"Default.DontSizeInt16","content":"Default.DontSizeInt16 \nDontSizeInt16 \n\nGenerates int16 values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DontSizeInt32","title":"Default.DontSizeInt32","content":"Default.DontSizeInt32 \nDontSizeInt32 \n\nGenerates int32 values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DontSizeInt64","title":"Default.DontSizeInt64","content":"Default.DontSizeInt64 \nDontSizeInt64 \n\nGenerates int64 values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DontSizeUInt16","title":"Default.DontSizeUInt16","content":"Default.DontSizeUInt16 \nDontSizeUInt16 \n\nGenerates uint16 values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DontSizeUInt32","title":"Default.DontSizeUInt32","content":"Default.DontSizeUInt32 \nDontSizeUInt32 \n\nGenerates uint32 values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#DontSizeUInt64","title":"Default.DontSizeUInt64","content":"Default.DontSizeUInt64 \nDontSizeUInt64 \n\nGenerates uint64 values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#FixedLengthArray","title":"Default.FixedLengthArray","content":"Default.FixedLengthArray \nFixedLengthArray \n\nArrays whose length does not change when shrinking.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Float","title":"Default.Float","content":"Default.Float \nFloat \n\nGenerates float values that are between -size and size, NaN, NegativeInfinity, PositiveInfinity, \nMaxValue, MinValue, Epsilon included fairly frequently.\nShrinks by yielding zero, abs of the origin and the truncated origin.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Float32","title":"Default.Float32","content":"Default.Float32 \nFloat32 \n\nGenerates float32 values that are between -size and size, NaN, NegativeInfinity, PositiveInfinity, \nMaxValue, MinValue, Epsilon included fairly frequently.\nShrinks by yielding zero, abs of the origin and the truncated origin.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#FsList","title":"Default.FsList","content":"Default.FsList \nFsList \n\nGenerates lists. \nThe length of the generated list is between 0 and the test size + 1. \nThe sum of the sizes of the elements is equal to the size of the generated list.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Fun","title":"Default.Fun","content":"Default.Fun \nFun \n\nGenerates F# function values. Function values can be generated for types 'a->'b where 'b has an Arbitrary instance.\nThere is no shrinking for function values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Function","title":"Default.Function","content":"Default.Function \nFunction \n\nGenerates Function values that can be printed and shrunk. Function values can be generated for types 'a->'b \nwhere 'b has an Arbitrary instance.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Guid","title":"Default.Guid","content":"Default.Guid \nGuid \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#HostName","title":"Default.HostName","content":"Default.HostName \nHostName \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#ICollection","title":"Default.ICollection","content":"Default.ICollection \nICollection \n\n Generates System.Collections.Generic.ICollection instances.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#IDictionary","title":"Default.IDictionary","content":"Default.IDictionary \nIDictionary \n\n Generates System.Collections.Generic.IDictionary instances.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#IList","title":"Default.IList","content":"Default.IList \nIList \n\n Generates System.Collections.Generic.IList instances.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#IPAddress","title":"Default.IPAddress","content":"Default.IPAddress \nIPAddress \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#IPv4Address","title":"Default.IPv4Address","content":"Default.IPv4Address \nIPv4Address \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#IPv6Address","title":"Default.IPv6Address","content":"Default.IPv6Address \nIPv6Address \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Int16","title":"Default.Int16","content":"Default.Int16 \nInt16 \n\nGenerates int16 values that are between -size and size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Int32","title":"Default.Int32","content":"Default.Int32 \nInt32 \n\nGenerates int32 values that are between -size and size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Int64","title":"Default.Int64","content":"Default.Int64 \nInt64 \n\nGenerates int64 values that are between -size and size.\nNote that since the size is an int32, this does not actually cover the full\nrange of int64. See DoNotSize<int64> instead.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#IntWithMinMax","title":"Default.IntWithMinMax","content":"Default.IntWithMinMax \nIntWithMinMax \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Interval","title":"Default.Interval","content":"Default.Interval \nInterval \n\nGenerates intervals between two non-negative integers.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#KeyValuePair","title":"Default.KeyValuePair","content":"Default.KeyValuePair \nKeyValuePair \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#List","title":"Default.List","content":"Default.List \nList \n\n Generates System.Collections.Generic.List instances.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#MailAddress","title":"Default.MailAddress","content":"Default.MailAddress \nMailAddress \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Map","title":"Default.Map","content":"Default.Map \nMap \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#NegativeInt","title":"Default.NegativeInt","content":"Default.NegativeInt \nNegativeInt \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#NonEmptyArray","title":"Default.NonEmptyArray","content":"Default.NonEmptyArray \nNonEmptyArray \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#NonEmptySet","title":"Default.NonEmptySet","content":"Default.NonEmptySet \nNonEmptySet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#NonEmptyString","title":"Default.NonEmptyString","content":"Default.NonEmptyString \nNonEmptyString \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#NonNegativeInt","title":"Default.NonNegativeInt","content":"Default.NonNegativeInt \nNonNegativeInt \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#NonNull","title":"Default.NonNull","content":"Default.NonNull \nNonNull \n\nGenerates underlying values that are not null.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#NonWhiteSpaceString","title":"Default.NonWhiteSpaceString","content":"Default.NonWhiteSpaceString \nNonWhiteSpaceString \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#NonZeroInt","title":"Default.NonZeroInt","content":"Default.NonZeroInt \nNonZeroInt \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#NormalFloat","title":"Default.NormalFloat","content":"Default.NormalFloat \nNormalFloat \n\nGenerates float values that are between -size and size (without NaN, Infinity, Epsilon, MinValue, MaxValue)\nShrinks by yielding zero, abs of the origin and the truncated origin.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Nullable","title":"Default.Nullable","content":"Default.Nullable \nNullable \n\nGenerates nullable values that are null 1/8 of the time.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Object","title":"Default.Object","content":"Default.Object \nObject \n\nGenerates objects which are a boxed char, string or boolean value.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Option","title":"Default.Option","content":"Default.Option \nOption \n\nGenerates option values that are 'None' 1/8 of the time.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#PositiveInt","title":"Default.PositiveInt","content":"Default.PositiveInt \nPositiveInt \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#SByte","title":"Default.SByte","content":"Default.SByte \nSByte \n\nGenerates sbyte values that are unrestricted by size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Set","title":"Default.Set","content":"Default.Set \nSet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#String","title":"Default.String","content":"Default.String \nString \n\nGenerates strings, which are lists of characters or null (1/10 of the time).\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#StringWithoutNullChars","title":"Default.StringWithoutNullChars","content":"Default.StringWithoutNullChars \nStringWithoutNullChars \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#SystemAction","title":"Default.SystemAction","content":"Default.SystemAction \nSystemAction \n\nGenerates Action'0 values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#SystemAction1","title":"Default.SystemAction1","content":"Default.SystemAction1 \nSystemAction1 \n\nGenerates Action'1 values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#SystemAction2","title":"Default.SystemAction2","content":"Default.SystemAction2 \nSystemAction2 \n\nGenerates Action'2 values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#SystemAction3","title":"Default.SystemAction3","content":"Default.SystemAction3 \nSystemAction3 \n\nGenerates Action'3 values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#SystemFunc","title":"Default.SystemFunc","content":"Default.SystemFunc \nSystemFunc \n\nGenerates Func'1 values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#SystemFunc1","title":"Default.SystemFunc1","content":"Default.SystemFunc1 \nSystemFunc1 \n\nGenerates Func'2 values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#SystemFunc2","title":"Default.SystemFunc2","content":"Default.SystemFunc2 \nSystemFunc2 \n\nGenerates Func'3 values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#SystemFunc3","title":"Default.SystemFunc3","content":"Default.SystemFunc3 \nSystemFunc3 \n\nGenerates Func'4 values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#ThrowingFunction","title":"Default.ThrowingFunction","content":"Default.ThrowingFunction \nThrowingFunction \n\nGenerates F# function values that generate an instance of the function result type about half the time. The other \ntimes it generate one of a list of common .NET exceptions, including Exception, ArgumentException, ArithmeticException,\nIOException, NotImplementedException, OUtOfMemoryException and others.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#ThrowingFunction","title":"Default.ThrowingFunction","content":"Default.ThrowingFunction \nThrowingFunction \n\nGenerates F# function values that generate an instance of the function result type about half the time. The other \ntimes it generate one of the given exceptions.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#TimeSpan","title":"Default.TimeSpan","content":"Default.TimeSpan \nTimeSpan \n\nGenerates TimeSpan values that are unrestricted by size. \nA TimeSpan is shrunk by removing days, hours, minutes, second and milliseconds.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#UInt16","title":"Default.UInt16","content":"Default.UInt16 \nUInt16 \n\nGenerates uint16 values that are between 0 and size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#UInt32","title":"Default.UInt32","content":"Default.UInt32 \nUInt32 \n\nGenerates uint32 values that are between 0 and size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#UInt64","title":"Default.UInt64","content":"Default.UInt64 \nUInt64 \n\nGenerates uint64 values that are between 0 and size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#Unit","title":"Default.Unit","content":"Default.Unit \nUnit \n\nGenerates (), of the unit type.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arb-default.html#XmlEncodedString","title":"Default.XmlEncodedString","content":"Default.XmlEncodedString \nXmlEncodedString \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arbpatterns.html","title":"ArbPatterns","content":"ArbPatterns \n \nArbPatterns.( |Fun| ) \n( |Fun| )"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arbpatterns.html#( |Fun| )","title":"ArbPatterns.( |Fun| )","content":"ArbPatterns.( |Fun| ) \n( |Fun| ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command.html","title":"Command","content":"Command \n \nCommand.create \ncreate \nCommand.createFuncProp \ncreateFuncProp \nCommand.createFuncBool \ncreateFuncBool \nCommand.generate \ngenerate \nCommand.generateCommands \ngenerateCommands \nCommand.shrink \nshrink \nCommand.toPropertyWith \ntoPropertyWith \nCommand.toProperty \ntoProperty"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command.html#create","title":"Command.create","content":"Command.create \ncreate \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command.html#createFuncProp","title":"Command.createFuncProp","content":"Command.createFuncProp \ncreateFuncProp \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command.html#createFuncBool","title":"Command.createFuncBool","content":"Command.createFuncBool \ncreateFuncBool \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command.html#generate","title":"Command.generate","content":"Command.generate \ngenerate \n\nCreate a generator that generates a sequence of Command objects that\nsatisfies the given specification.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command.html#generateCommands","title":"Command.generateCommands","content":"Command.generateCommands \ngenerateCommands \n\nCreate a generator that generates a sequence of Command objects that\nsatisfies the given specification.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command.html#shrink","title":"Command.shrink","content":"Command.shrink \nshrink \n\nCreate a shrinker to reduce a sequence of Command objects so that\nthe reduced sequence satisfies the given specification.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command.html#toPropertyWith","title":"Command.toPropertyWith","content":"Command.toPropertyWith \ntoPropertyWith \n\nTurn a specification into a property, allowing you to specify generator and shrinker.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command.html#toProperty","title":"Command.toProperty","content":"Command.toProperty \ntoProperty \n\nTurn a specification into a property.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html","title":"Gen","content":"Gen \n\nCombinators to build custom random generators for any type.\n \nGen.constant \nconstant \nGen.fresh \nfresh \nGen.freshFunc \nfreshFunc \nGen.map \nmap \nGen.sized \nsized \nGen.sizedFunc \nsizedFunc \nGen.resize \nresize \nGen.eval \neval \nGen.sample \nsample \nGen.choose \nchoose \nGen.elementsArr \nelementsArr \nGen.elements \nelements \nGen.growingElements \ngrowingElements \nGen.oneof \noneof \nGen.oneOfArr \noneOfArr \nGen.frequency \nfrequency \nGen.frequencySeqWeightAndValue \nfrequencySeqWeightAndValue \nGen.frequencyWeightAndValueArr \nfrequencyWeightAndValueArr \nGen.frequencyTupleArr \nfrequencyTupleArr \nGen.map2 \nmap2 \nGen.two \ntwo \nGen.map3 \nmap3 \nGen.three \nthree \nGen.map4 \nmap4 \nGen.four \nfour \nGen.map5 \nmap5 \nGen.map6 \nmap6 \nGen.zip \nzip \nGen.zip3 \nzip3 \nGen.unzip \nunzip \nGen.unzip3 \nunzip3 \nGen.collect \ncollect \nGen.sequence \nsequence \nGen.collectToSeq \ncollectToSeq \nGen.sequenceToSeq \nsequenceToSeq \nGen.collectToArr \ncollectToArr \nGen.sequenceToArr \nsequenceToArr \nGen.listOfLength \nlistOfLength \nGen.shuffle \nshuffle \nGen.tryWhere \ntryWhere \nGen.tryFilter \ntryFilter \nGen.suchThatOption \nsuchThatOption \nGen.where \nwhere \nGen.filter \nfilter \nGen.suchThat \nsuchThat \nGen.piles \npiles \nGen.listOf \nlistOf \nGen.nonEmptyListOf \nnonEmptyListOf \nGen.subListOf \nsubListOf \nGen.subListOfToIList \nsubListOfToIList \nGen.subListOfArr \nsubListOfArr \nGen.arrayOfLength \narrayOfLength \nGen.arrayOf \narrayOf \nGen.array2DOfDim \narray2DOfDim \nGen.array2DOf \narray2DOf \nGen.optionOf \noptionOf \nGen.apply \napply \nGen.scaleSize \nscaleSize"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#constant","title":"Gen.constant","content":"Gen.constant \nconstant \n\nAlways generate the same instance v. See also fresh.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#fresh","title":"Gen.fresh","content":"Gen.fresh \nfresh \n\nGenerate a fresh instance every time the generator is called. Useful for mutable objects.\nSee also constant.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#freshFunc","title":"Gen.freshFunc","content":"Gen.freshFunc \nfreshFunc \n\nGenerate a fresh instance every time the generatoris called. Useful for mutable objects.\nSee also constant.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#map","title":"Gen.map","content":"Gen.map \nmap \n\nApply the function f to the value in the generator, yielding a new generator.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#sized","title":"Gen.sized","content":"Gen.sized \nsized \n\nObtain the current size. sized g calls g, passing it the current size as a parameter.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#sizedFunc","title":"Gen.sizedFunc","content":"Gen.sizedFunc \nsizedFunc \n\nObtain the current size. sized g calls g, passing it the current size as a parameter.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#resize","title":"Gen.resize","content":"Gen.resize \nresize \n\nOverride the current size of the test. resize n g invokes generator g with size parameter n.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#eval","title":"Gen.eval","content":"Gen.eval \neval \n\nGenerates a value of the give size with the given seed.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#sample","title":"Gen.sample","content":"Gen.sample \nsample \n\nGenerates n values of the given size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#choose","title":"Gen.choose","content":"Gen.choose \nchoose \n\nGenerates an integer between l and h, inclusive.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#elementsArr","title":"Gen.elementsArr","content":"Gen.elementsArr \nelementsArr \n\nBuild a generator that randomly generates one of the values in the given non-empty seq.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#elements","title":"Gen.elements","content":"Gen.elements \nelements \n\nBuild a generator that randomly generates one of the values in the given non-empty seq.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#growingElements","title":"Gen.growingElements","content":"Gen.growingElements \ngrowingElements \n\nBuild a generator that takes a non-empty sequence and randomly generates\none of the values among an initial segment of that sequence. The size of\nthis initial segment increases with the size parameter. Essentially this\ngenerator is Gen.elements but taking also the runtime size into account.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#oneof","title":"Gen.oneof","content":"Gen.oneof \noneof \n\nBuild a generator that generates a value from one of the generators in the given non-empty seq, with\nequal probability.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#oneOfArr","title":"Gen.oneOfArr","content":"Gen.oneOfArr \noneOfArr \n\nBuild a generator that generates a value from one of the given generators, with\nequal probability.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#frequency","title":"Gen.frequency","content":"Gen.frequency \nfrequency \n\n Build a generator that generates a value from one of the generators in the given non-empty seq, with\n given probabilities. The sum of the probabilities must be larger than zero.\n "},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#frequencySeqWeightAndValue","title":"Gen.frequencySeqWeightAndValue","content":"Gen.frequencySeqWeightAndValue \nfrequencySeqWeightAndValue \n\n Build a generator that generates a value from one of the generators in the given non-empty seq, with\n given probabilities. The sum of the probabilities must be larger than zero.\n "},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#frequencyWeightAndValueArr","title":"Gen.frequencyWeightAndValueArr","content":"Gen.frequencyWeightAndValueArr \nfrequencyWeightAndValueArr \n\n Build a generator that generates a value from one of the generators in the given non-empty seq, with\n given probabilities. The sum of the probabilities must be larger than zero.\n "},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#frequencyTupleArr","title":"Gen.frequencyTupleArr","content":"Gen.frequencyTupleArr \nfrequencyTupleArr \n\n Build a generator that generates a value from one of the generators in the given non-empty seq, with\n given probabilities. The sum of the probabilities must be larger than zero.\n "},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#map2","title":"Gen.map2","content":"Gen.map2 \nmap2 \n\nMap the given function over values to a function over generators of those values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#two","title":"Gen.two","content":"Gen.two \ntwo \n\nBuild a generator that generates a 2-tuple of the values generated by the given generator.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#map3","title":"Gen.map3","content":"Gen.map3 \nmap3 \n\nMap the given function over values to a function over generators of those values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#three","title":"Gen.three","content":"Gen.three \nthree \n\nBuild a generator that generates a 3-tuple of the values generated by the given generator.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#map4","title":"Gen.map4","content":"Gen.map4 \nmap4 \n\nMap the given function over values to a function over generators of those values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#four","title":"Gen.four","content":"Gen.four \nfour \n\nBuild a generator that generates a 4-tuple of the values generated by the given generator.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#map5","title":"Gen.map5","content":"Gen.map5 \nmap5 \n\nMap the given function over values to a function over generators of those values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#map6","title":"Gen.map6","content":"Gen.map6 \nmap6 \n\nMap the given function over values to a function over generators of those values.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#zip","title":"Gen.zip","content":"Gen.zip \nzip \n\nCombine two generators into a generator of pairs.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#zip3","title":"Gen.zip3","content":"Gen.zip3 \nzip3 \n\nCombine three generators into a generator of 3-tuples.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#unzip","title":"Gen.unzip","content":"Gen.unzip \nunzip \n\nSplit a generator of pairs into a pair of generators.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#unzip3","title":"Gen.unzip3","content":"Gen.unzip3 \nunzip3 \n\nSplit a generator of 3-tuples into a 3-tuple of generators.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#collect","title":"Gen.collect","content":"Gen.collect \ncollect \n\n Traverse the given enumerable into a generator of a list using the specified binder function to create generators.\n[category: Create generators from generators]\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#sequence","title":"Gen.sequence","content":"Gen.sequence \nsequence \n\n Sequence the given enumerable of generators into a generator of a list.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#collectToSeq","title":"Gen.collectToSeq","content":"Gen.collectToSeq \ncollectToSeq \n\n Traverse the given enumerable into a generator of an enumerable using the specified binder function to create generators.\n[category: Create generators from generators]\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#sequenceToSeq","title":"Gen.sequenceToSeq","content":"Gen.sequenceToSeq \nsequenceToSeq \n\n Sequence the given enumerable of generators into a generator of an enumerable.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#collectToArr","title":"Gen.collectToArr","content":"Gen.collectToArr \ncollectToArr \n\n Traverse the given array into a generator of an array using the specified binder function to create generators.\n[category: Creating generators from generators]\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#sequenceToArr","title":"Gen.sequenceToArr","content":"Gen.sequenceToArr \nsequenceToArr \n\n Sequence the given array of generators into a generator of an array.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#listOfLength","title":"Gen.listOfLength","content":"Gen.listOfLength \nlistOfLength \n\nGenerates a list of given length, containing values generated by the given generator.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#shuffle","title":"Gen.shuffle","content":"Gen.shuffle \nshuffle \n\nGenerates a random permutation of the given sequence.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#tryWhere","title":"Gen.tryWhere","content":"Gen.tryWhere \ntryWhere \n\nTries to generate a value that satisfies a predicate. This function 'gives up' by generating None\nif the given original generator did not generate any values that satisfied the predicate, after trying to\nget values by increasing its size.\n\nThe `tryWhere` function is also aliased as `tryFilter`. These two functions are identical, but co-exist\nso that you can choose the word that makes your code most readable in your given context.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#tryFilter","title":"Gen.tryFilter","content":"Gen.tryFilter \ntryFilter \n\nTries to generate a value that satisfies a predicate. This function 'gives up' by generating None\nif the given original generator did not generate any values that satisfied the predicate, after trying to\nget values by increasing its size.\n\nThe `tryFilter` function is an alias for the `tryWhere` function. These two functions are identical, but co-exist\nso that you can choose the word that makes your code most readable in your given context.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#suchThatOption","title":"Gen.suchThatOption","content":"Gen.suchThatOption \nsuchThatOption \n\nTries to generate a value that satisfies a predicate. This function 'gives up' by generating None\nif the given original generator did not generate any values that satisfied the predicate, after trying to\nget values by increasing its size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#where","title":"Gen.where","content":"Gen.where \nwhere \n\nGenerates a value that satisfies a predicate. Contrary to tryWhere, this function keeps re-trying\nby increasing the size of the original generator ad infinitum.  Make sure there is a high probability that \nthe predicate is satisfied.\n\nThe `where` function is also aliased as `filter`. These two functions are identical, but co-exist\nso that you can choose the word that makes your code most readable in your given context.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#filter","title":"Gen.filter","content":"Gen.filter \nfilter \n\nGenerates a value that satisfies a predicate. Contrary to tryFilter, this function keeps re-trying\nby increasing the size of the original generator ad infinitum.  Make sure there is a high probability that \nthe predicate is satisfied.\n\nThe `filter` function is an alias for the `where` function. These two functions are identical, but co-exist\nso that you can choose the word that makes your code most readable in your given context.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#suchThat","title":"Gen.suchThat","content":"Gen.suchThat \nsuchThat \n\nGenerates a value that satisfies a predicate. Contrary to suchThatOption, this function keeps re-trying\nby increasing the size of the original generator ad infinitum.  Make sure there is a high probability that \nthe predicate is satisfied.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#piles","title":"Gen.piles","content":"Gen.piles \npiles \n\n Generates a random array of length k where the sum of\n all elements equals the given sum.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#listOf","title":"Gen.listOf","content":"Gen.listOf \nlistOf \n\n Generates a list of random length. The maximum length depends on the\n size parameter.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#nonEmptyListOf","title":"Gen.nonEmptyListOf","content":"Gen.nonEmptyListOf \nnonEmptyListOf \n\n Generates a non-empty list of random length. The maximum length \n depends on the size parameter.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#subListOf","title":"Gen.subListOf","content":"Gen.subListOf \nsubListOf \n\n Generates sublists of the given sequence.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#subListOfToIList","title":"Gen.subListOfToIList","content":"Gen.subListOfToIList \nsubListOfToIList \n\n Generates sublists of the given IEnumerable.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#subListOfArr","title":"Gen.subListOfArr","content":"Gen.subListOfArr \nsubListOfArr \n\n Generates sublists of the given arguments.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#arrayOfLength","title":"Gen.arrayOfLength","content":"Gen.arrayOfLength \narrayOfLength \n\n Generates an array of a specified length.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#arrayOf","title":"Gen.arrayOf","content":"Gen.arrayOf \narrayOf \n\n Generates an array using the specified generator. The maximum length is the size+1.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#array2DOfDim","title":"Gen.array2DOfDim","content":"Gen.array2DOfDim \narray2DOfDim \n\n Generates a 2D array of the given dimensions.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#array2DOf","title":"Gen.array2DOf","content":"Gen.array2DOf \narray2DOf \n\n Generates a 2D array. The square root of the size is the maximum number of rows and columns.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#optionOf","title":"Gen.optionOf","content":"Gen.optionOf \noptionOf \n\nGenerate an option value that is 'None' 1/8 of the time.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#apply","title":"Gen.apply","content":"Gen.apply \napply \n\nApply the given Gen function to the given generator, aka the applicative <*> operator.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen.html#scaleSize","title":"Gen.scaleSize","content":"Gen.scaleSize \nscaleSize \n\nModify a size using the given function before passing it to the given Gen.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder.html","title":"GenBuilder","content":"GenBuilder \n\nComputation expression builder for Gen.\n \nGenBuilder.GenBuilder \nGenBuilder \nGenBuilder.gen \ngen"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder.html#gen","title":"GenBuilder.gen","content":"GenBuilder.gen \ngen \n\nThe workflow function for generators, e.g. gen { ... }\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder-genbuilder.html","title":"GenBuilder","content":"GenBuilder \n\nThe workflow type for generators.\n \nGenBuilder.Bind \nBind \nGenBuilder.Combine \nCombine \nGenBuilder.Delay \nDelay \nGenBuilder.For \nFor \nGenBuilder.Return \nReturn \nGenBuilder.ReturnFrom \nReturnFrom \nGenBuilder.TryFinally \nTryFinally \nGenBuilder.TryWith \nTryWith \nGenBuilder.Using \nUsing \nGenBuilder.While \nWhile \nGenBuilder.Zero \nZero"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder-genbuilder.html#Bind","title":"GenBuilder.Bind","content":"GenBuilder.Bind \nBind \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder-genbuilder.html#Combine","title":"GenBuilder.Combine","content":"GenBuilder.Combine \nCombine \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder-genbuilder.html#Delay","title":"GenBuilder.Delay","content":"GenBuilder.Delay \nDelay \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder-genbuilder.html#For","title":"GenBuilder.For","content":"GenBuilder.For \nFor \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder-genbuilder.html#Return","title":"GenBuilder.Return","content":"GenBuilder.Return \nReturn \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder-genbuilder.html#ReturnFrom","title":"GenBuilder.ReturnFrom","content":"GenBuilder.ReturnFrom \nReturnFrom \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder-genbuilder.html#TryFinally","title":"GenBuilder.TryFinally","content":"GenBuilder.TryFinally \nTryFinally \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder-genbuilder.html#TryWith","title":"GenBuilder.TryWith","content":"GenBuilder.TryWith \nTryWith \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder-genbuilder.html#Using","title":"GenBuilder.Using","content":"GenBuilder.Using \nUsing \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder-genbuilder.html#While","title":"GenBuilder.While","content":"GenBuilder.While \nWhile \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genbuilder-genbuilder.html#Zero","title":"GenBuilder.Zero","content":"GenBuilder.Zero \nZero \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html","title":"Prop","content":"Prop \n\nCombinators to build properties, which define the property to be tested, with some\nconvenience methods to investigate the generated arguments and any found counter-examples.\n \nProp.forAll \nforAll \nProp.forAllAction1 \nforAllAction1 \nProp.forAllFunc1Bool \nforAllFunc1Bool \nProp.forAllFunc1Prop \nforAllFunc1Prop \nProp.forAllAction1Def \nforAllAction1Def \nProp.forAllFunc1BoolDef \nforAllFunc1BoolDef \nProp.forAllFunc1PropDef \nforAllFunc1PropDef \nProp.forAllAction2 \nforAllAction2 \nProp.forAllFunc2Bool \nforAllFunc2Bool \nProp.forAllFunc2Prop \nforAllFunc2Prop \nProp.forAllAction2Def \nforAllAction2Def \nProp.forAllFunc2BoolDef \nforAllFunc2BoolDef \nProp.forAllFunc2PropDef \nforAllFunc2PropDef \nProp.forAllAction3 \nforAllAction3 \nProp.forAllFunc3Bool \nforAllFunc3Bool \nProp.forAllFunc3Prop \nforAllFunc3Prop \nProp.forAllAction3Def \nforAllAction3Def \nProp.forAllFunc3BoolDef \nforAllFunc3BoolDef \nProp.forAllFunc3PropDef \nforAllFunc3PropDef \nProp.given \ngiven \nProp.filter \nfilter \nProp.filterFunc \nfilterFunc \nProp.filterAction \nfilterAction \nProp.throws \nthrows \nProp.classify \nclassify \nProp.trivial \ntrivial \nProp.collect \ncollect \nProp.label \nlabel \nProp.within \nwithin \nProp.ofTestable \nofTestable \nProp.discard \ndiscard"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAll","title":"Prop.forAll","content":"Prop.forAll \nforAll \n\nQuantified property combinator. Provide a custom test data generator to a property.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllAction1","title":"Prop.forAllAction1","content":"Prop.forAllAction1 \nforAllAction1 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllFunc1Bool","title":"Prop.forAllFunc1Bool","content":"Prop.forAllFunc1Bool \nforAllFunc1Bool \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllFunc1Prop","title":"Prop.forAllFunc1Prop","content":"Prop.forAllFunc1Prop \nforAllFunc1Prop \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllAction1Def","title":"Prop.forAllAction1Def","content":"Prop.forAllAction1Def \nforAllAction1Def \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllFunc1BoolDef","title":"Prop.forAllFunc1BoolDef","content":"Prop.forAllFunc1BoolDef \nforAllFunc1BoolDef \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllFunc1PropDef","title":"Prop.forAllFunc1PropDef","content":"Prop.forAllFunc1PropDef \nforAllFunc1PropDef \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllAction2","title":"Prop.forAllAction2","content":"Prop.forAllAction2 \nforAllAction2 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllFunc2Bool","title":"Prop.forAllFunc2Bool","content":"Prop.forAllFunc2Bool \nforAllFunc2Bool \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllFunc2Prop","title":"Prop.forAllFunc2Prop","content":"Prop.forAllFunc2Prop \nforAllFunc2Prop \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllAction2Def","title":"Prop.forAllAction2Def","content":"Prop.forAllAction2Def \nforAllAction2Def \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllFunc2BoolDef","title":"Prop.forAllFunc2BoolDef","content":"Prop.forAllFunc2BoolDef \nforAllFunc2BoolDef \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllFunc2PropDef","title":"Prop.forAllFunc2PropDef","content":"Prop.forAllFunc2PropDef \nforAllFunc2PropDef \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllAction3","title":"Prop.forAllAction3","content":"Prop.forAllAction3 \nforAllAction3 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllFunc3Bool","title":"Prop.forAllFunc3Bool","content":"Prop.forAllFunc3Bool \nforAllFunc3Bool \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllFunc3Prop","title":"Prop.forAllFunc3Prop","content":"Prop.forAllFunc3Prop \nforAllFunc3Prop \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllAction3Def","title":"Prop.forAllAction3Def","content":"Prop.forAllAction3Def \nforAllAction3Def \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllFunc3BoolDef","title":"Prop.forAllFunc3BoolDef","content":"Prop.forAllFunc3BoolDef \nforAllFunc3BoolDef \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#forAllFunc3PropDef","title":"Prop.forAllFunc3PropDef","content":"Prop.forAllFunc3PropDef \nforAllFunc3PropDef \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#given","title":"Prop.given","content":"Prop.given \ngiven \n\nDepending on the condition, return the first testable if true and the second if false.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#filter","title":"Prop.filter","content":"Prop.filter \nfilter \n\nConditional property combinator. Resulting property holds if the given property holds whenever the condition does. See also operator:  'assertion ==> property'\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#filterFunc","title":"Prop.filterFunc","content":"Prop.filterFunc \nfilterFunc \n\nConditional property combinator. Resulting property holds if the given property holds whenever the condition does. See also operator:  'assertion ==> property'\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#filterAction","title":"Prop.filterAction","content":"Prop.filterAction \nfilterAction \n\nConditional property combinator. Resulting property holds if the given property holds whenever the condition does. See also operator:  'assertion ==> property'\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#throws","title":"Prop.throws","content":"Prop.throws \nthrows \n\nExpect exception 't when executing p. So, results in success if an exception of the given type is thrown, \nand a failure otherwise.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#classify","title":"Prop.classify","content":"Prop.classify \nclassify \n\nClassify test cases. Test cases satisfying the condition are assigned the classification given.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#trivial","title":"Prop.trivial","content":"Prop.trivial \ntrivial \n\nCount trivial cases. Test cases for which the condition is True are classified as trivial.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#collect","title":"Prop.collect","content":"Prop.collect \ncollect \n\nCollect data values. The argument of collect is evaluated in each test case, \nand the distribution of values is reported, using sprintf \"%A\".\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#label","title":"Prop.label","content":"Prop.label \nlabel \n\nAdd the given label to the property. The labels of a failing sub-property are displayed when it fails.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#within","title":"Prop.within","content":"Prop.within \nwithin \n\nFails the property if it does not complete within t milliseconds. Note that the called property gets a\ncancel signal, but whether it responds to that is up to the property; the execution may not actually stop.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#ofTestable","title":"Prop.ofTestable","content":"Prop.ofTestable \nofTestable \n\n Turns a testable type into a property. Testables are unit, boolean, Lazy testables, Gen testables, functions\n from a type for which a generator is know to a testable, tuples up to 6 tuple containing testables, and lists\n containing testables.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-prop.html#discard","title":"Prop.discard","content":"Prop.discard \ndiscard \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propoperators.html","title":"PropOperators","content":"PropOperators \n\nOperators for Prop.\n \nPropOperators.( ==> ) \n( ==> ) \nPropOperators.( |@ ) \n( |@ ) \nPropOperators.( @| ) \n( @| ) \nPropOperators.( %> ) \n( %> ) \nPropOperators.( .&. ) \n( .&. ) \nPropOperators.( .|. ) \n( .|. )"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propoperators.html#( ==> )","title":"PropOperators.( ==> )","content":"PropOperators.( ==> ) \n( ==> ) \n\nConditional property combinator. Resulting property holds if the property after ==> holds whenever the condition does.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propoperators.html#( |@ )","title":"PropOperators.( |@ )","content":"PropOperators.( |@ ) \n( |@ ) \n\nAdd the given label to the property. Property on the left hand side, label on the right.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propoperators.html#( @| )","title":"PropOperators.( @| )","content":"PropOperators.( @| ) \n( @| ) \n\nAdd the given label to the property. label on the left hand side, property on the right.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propoperators.html#( %> )","title":"PropOperators.( %> )","content":"PropOperators.( %> ) \n( %> ) \n\nAdd the given label to the property. Property on the left hand side, label on the right.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propoperators.html#( .&. )","title":"PropOperators.( .&. )","content":"PropOperators.( .&. ) \n( .&. ) \n\nConstruct a property that succeeds if both succeed. (cfr 'and')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propoperators.html#( .|. )","title":"PropOperators.( .|. )","content":"PropOperators.( .|. ) \n( .|. ) \n\nConstruct a property that fails if both fail. (cfr 'or')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html","title":"Random","content":"Random \n\nGenerate random numbers based on splitting seeds. Based Hugs' Random implementation.\n \nRandom.StdGen \nStdGen \nRandom.divMod64 \ndivMod64 \nRandom.hMod64 \nhMod64 \nRandom.q2 \nq2 \nRandom.q1 \nq1 \nRandom.a2 \na2 \nRandom.a1 \na1 \nRandom.r2 \nr2 \nRandom.r1 \nr1 \nRandom.m2 \nm2 \nRandom.m1 \nm1 \nRandom.mkStdGen \nmkStdGen \nRandom.stdNext \nstdNext \nRandom.stdSplit \nstdSplit \nRandom.stdRange \nstdRange \nRandom.range \nrange \nRandom.split \nsplit \nRandom.newSeed \nnewSeed"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#divMod64","title":"Random.divMod64","content":"Random.divMod64 \ndivMod64 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#hMod64","title":"Random.hMod64","content":"Random.hMod64 \nhMod64 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#q2","title":"Random.q2","content":"Random.q2 \nq2 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#q1","title":"Random.q1","content":"Random.q1 \nq1 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#a2","title":"Random.a2","content":"Random.a2 \na2 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#a1","title":"Random.a1","content":"Random.a1 \na1 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#r2","title":"Random.r2","content":"Random.r2 \nr2 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#r1","title":"Random.r1","content":"Random.r1 \nr1 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#m2","title":"Random.m2","content":"Random.m2 \nm2 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#m1","title":"Random.m1","content":"Random.m1 \nm1 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#mkStdGen","title":"Random.mkStdGen","content":"Random.mkStdGen \nmkStdGen \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#stdNext","title":"Random.stdNext","content":"Random.stdNext \nstdNext \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#stdSplit","title":"Random.stdSplit","content":"Random.stdSplit \nstdSplit \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#stdRange","title":"Random.stdRange","content":"Random.stdRange \nstdRange \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#range","title":"Random.range","content":"Random.range \nrange \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#split","title":"Random.split","content":"Random.split \nsplit \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random.html#newSeed","title":"Random.newSeed","content":"Random.newSeed \nnewSeed \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random-stdgen.html","title":"StdGen","content":"StdGen \n \nStdGen.StdGen \nStdGen"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-random-stdgen.html#StdGen","title":"StdGen.StdGen","content":"StdGen.StdGen \nStdGen \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-runner.html","title":"Runner","content":"Runner \n \nRunner.argumentsToString \nargumentsToString \nRunner.onStartFixtureToString \nonStartFixtureToString \nRunner.onFailureToString \nonFailureToString \nRunner.onFinishedToString \nonFinishedToString \nRunner.onArgumentsToString \nonArgumentsToString \nRunner.onShrinkToString \nonShrinkToString \nRunner.consoleRunner \nconsoleRunner \nRunner.init \ninit"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-runner.html#argumentsToString","title":"Runner.argumentsToString","content":"Runner.argumentsToString \nargumentsToString \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-runner.html#onStartFixtureToString","title":"Runner.onStartFixtureToString","content":"Runner.onStartFixtureToString \nonStartFixtureToString \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-runner.html#onFailureToString","title":"Runner.onFailureToString","content":"Runner.onFailureToString \nonFailureToString \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-runner.html#onFinishedToString","title":"Runner.onFinishedToString","content":"Runner.onFinishedToString \nonFinishedToString \n\nA function that returns the default string that is printed as a result of the test.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-runner.html#onArgumentsToString","title":"Runner.onArgumentsToString","content":"Runner.onArgumentsToString \nonArgumentsToString \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-runner.html#onShrinkToString","title":"Runner.onShrinkToString","content":"Runner.onShrinkToString \nonShrinkToString \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-runner.html#consoleRunner","title":"Runner.consoleRunner","content":"Runner.consoleRunner \nconsoleRunner \n\nA runner that prints results to the standard output.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-runner.html#init","title":"Runner.init","content":"Runner.init \ninit \n\nForce this value to do the necessary initializations of typeclasses. Normally this initialization happens automatically. \nIn any case, it can be forced any number of times without problem.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass.html","title":"TypeClass","content":"TypeClass \n\nHaskell typeclass concept simulation. For internal use.\n \nTypeClass.InstanceKind \nInstanceKind \nTypeClass.TypeClass<'TypeClass> \nTypeClass<'TypeClass> \nTypeClass.TypeClassComparison \nTypeClassComparison"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-instancekind.html","title":"InstanceKind","content":"InstanceKind \n \nInstanceKind.FromType \nFromType \nInstanceKind.StringStamp \nStringStamp \nInstanceKind.Primitive \nPrimitive \nInstanceKind.Generic \nGeneric \nInstanceKind.Array \nArray \nInstanceKind.CatchAll \nCatchAll"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-instancekind.html#FromType","title":"InstanceKind.FromType","content":"InstanceKind.FromType \nFromType \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-instancekind.html#StringStamp","title":"InstanceKind.StringStamp","content":"InstanceKind.StringStamp \nStringStamp \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-instancekind.html#Primitive","title":"InstanceKind.Primitive","content":"InstanceKind.Primitive \nPrimitive \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-instancekind.html#Generic","title":"InstanceKind.Generic","content":"InstanceKind.Generic \nGeneric \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-instancekind.html#Array","title":"InstanceKind.Array","content":"InstanceKind.Array \nArray \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-instancekind.html#CatchAll","title":"InstanceKind.CatchAll","content":"InstanceKind.CatchAll \nCatchAll \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclass-1.html","title":"TypeClass<'TypeClass>","content":"TypeClass<'TypeClass> \n \nTypeClass<'TypeClass>.Compare \nCompare \nTypeClass<'TypeClass>.Discover \nDiscover \nTypeClass<'TypeClass>.DiscoverAndMerge \nDiscoverAndMerge \nTypeClass<'TypeClass>.GetInstance \nGetInstance \nTypeClass<'TypeClass>.InstanceFor \nInstanceFor \nTypeClass<'TypeClass>.Merge \nMerge \nTypeClass<'TypeClass>.Instances \nInstances \nTypeClass<'TypeClass>.HasCatchAll \nHasCatchAll \nTypeClass<'TypeClass>.Class \nClass \nTypeClass<'TypeClass>.New \nNew"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclass-1.html#Compare","title":"TypeClass<'TypeClass>.Compare","content":"TypeClass<'TypeClass>.Compare \nCompare \n\nCompares this TypeClass with the given TypeClass. Returns, respectively, the new instances, overridden instances,\nnew array instances, overridden array instances, new catch all or overridden catchall introduced by the other TypeClass.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclass-1.html#Discover","title":"TypeClass<'TypeClass>.Discover","content":"TypeClass<'TypeClass>.Discover \nDiscover \n\nMake a new TypeClass with only the instances registered on the given type.\nNote that the instances of this TypeClass will not be registered on the new TypeClass. \nUse Merge in addition to achieve that, or use DiscoverAndMerge to do both.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclass-1.html#DiscoverAndMerge","title":"TypeClass<'TypeClass>.DiscoverAndMerge","content":"TypeClass<'TypeClass>.DiscoverAndMerge \nDiscoverAndMerge \n\nDiscover instances for this TypeClass on the given type. Merge the result with this TypeClass,\nwith the newly discovered instances overriding the instances on this TypeClass.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclass-1.html#GetInstance","title":"TypeClass<'TypeClass>.GetInstance","content":"TypeClass<'TypeClass>.GetInstance \nGetInstance \n\nGet the instance registered on this TypeClass for the given type and optionally the given arguments. \nThe result is of type 'TypeClass<'T>, dynamically.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclass-1.html#InstanceFor","title":"TypeClass<'TypeClass>.InstanceFor","content":"TypeClass<'TypeClass>.InstanceFor \nInstanceFor \n\nGet the instance registered on this TypeClass for the given type parameter 'T. The result will be cast\nto TypeClassT, which should be 'TypeClass<'T> but that's impossible to express in .NET's type system.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclass-1.html#Merge","title":"TypeClass<'TypeClass>.Merge","content":"TypeClass<'TypeClass>.Merge \nMerge \n\nMerge the instances defined by the given instances type with the ones already defined in this TypeClass.\nInstances defined in the given type override the instances in this TypeClass instance.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclass-1.html#Instances","title":"TypeClass<'TypeClass>.Instances","content":"TypeClass<'TypeClass>.Instances \nInstances \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclass-1.html#HasCatchAll","title":"TypeClass<'TypeClass>.HasCatchAll","content":"TypeClass<'TypeClass>.HasCatchAll \nHasCatchAll \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclass-1.html#Class","title":"TypeClass<'TypeClass>.Class","content":"TypeClass<'TypeClass>.Class \nClass \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclass-1.html#New","title":"TypeClass<'TypeClass>.New","content":"TypeClass<'TypeClass>.New \nNew \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclasscomparison.html","title":"TypeClassComparison","content":"TypeClassComparison \n \nTypeClassComparison.ToStructuredDisplay \nToStructuredDisplay \nTypeClassComparison.NewInstances \nNewInstances \nTypeClassComparison.OverriddenInstances \nOverriddenInstances"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclasscomparison.html#ToStructuredDisplay","title":"TypeClassComparison.ToStructuredDisplay","content":"TypeClassComparison.ToStructuredDisplay \nToStructuredDisplay \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclasscomparison.html#NewInstances","title":"TypeClassComparison.NewInstances","content":"TypeClassComparison.NewInstances \nNewInstances \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-typeclass-typeclasscomparison.html#OverriddenInstances","title":"TypeClassComparison.OverriddenInstances","content":"TypeClassComparison.OverriddenInstances \nOverriddenInstances \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arbitrary-1.html","title":"Arbitrary<'a>","content":"Arbitrary<'a> \n \nArbitrary<'a>.( .ctor ) \n( .ctor ) \nArbitrary<'a>.Shrinker \nShrinker \nArbitrary<'a>.Generator \nGenerator"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arbitrary-1.html#( .ctor )","title":"Arbitrary<'a>.( .ctor )","content":"Arbitrary<'a>.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arbitrary-1.html#Shrinker","title":"Arbitrary<'a>.Shrinker","content":"Arbitrary<'a>.Shrinker \nShrinker \n\nReturns a sequence of the immediate shrinks of the given value. The immediate shrinks should not include\ndoubles or the given value itself. The default implementation returns the empty sequence (i.e. no shrinking).\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arbitrary-1.html#Generator","title":"Arbitrary<'a>.Generator","content":"Arbitrary<'a>.Generator \nGenerator \n\nReturns a generator for 'a.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arbitraryextensions.html","title":"ArbitraryExtensions","content":"ArbitraryExtensions \n\nExtensons to transform Arbitrary instances into other Arbitrary instances.\n \nArbitraryExtensions.Convert \nConvert \nArbitraryExtensions.Filter \nFilter \nArbitraryExtensions.MapFilter \nMapFilter"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arbitraryextensions.html#Convert","title":"ArbitraryExtensions.Convert","content":"ArbitraryExtensions.Convert \nConvert \n\nConstruct an Arbitrary instance for a type that can be mapped to and from another type (e.g. a wrapper),\nbased on a Arbitrary instance for the source type and two mapping functions. \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arbitraryextensions.html#Filter","title":"ArbitraryExtensions.Filter","content":"ArbitraryExtensions.Filter \nFilter \n\n Return an Arbitrary instance that is a filtered version of an existing arbitrary instance.\n The generator uses Gen.suchThat, and the shrinks are filtered using Seq.filter with the given predicate.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-arbitraryextensions.html#MapFilter","title":"ArbitraryExtensions.MapFilter","content":"ArbitraryExtensions.MapFilter \nMapFilter \n\n Return an Arbitrary instance that is a mapped and filtered version of an existing arbitrary instance.\n The generator uses Gen.map with the given mapper and then Gen.suchThat with the given predicate, \n and the shrinks are filtered using Seq.filter with the given predicate.\nThis is sometimes useful if using just a filter would reduce the chance of getting a good value\nfrom the generator - and you can map the value instead. E.g. PositiveInt.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html","title":"Check","content":"Check \n \nCheck.All \nAll \nCheck.All \nAll \nCheck.Method \nMethod \nCheck.One \nOne \nCheck.One \nOne \nCheck.Quick \nQuick \nCheck.Quick \nQuick \nCheck.QuickAll \nQuickAll \nCheck.QuickAll \nQuickAll \nCheck.QuickThrowOnFailure \nQuickThrowOnFailure \nCheck.QuickThrowOnFailureAll \nQuickThrowOnFailureAll \nCheck.QuickThrowOnFailureAll \nQuickThrowOnFailureAll \nCheck.Verbose \nVerbose \nCheck.Verbose \nVerbose \nCheck.VerboseAll \nVerboseAll \nCheck.VerboseAll \nVerboseAll \nCheck.VerboseThrowOnFailure \nVerboseThrowOnFailure \nCheck.VerboseThrowOnFailureAll \nVerboseThrowOnFailureAll \nCheck.VerboseThrowOnFailureAll \nVerboseThrowOnFailureAll"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#All","title":"Check.All","content":"Check.All \nAll \n\nCheck all public static methods on the given type that have a testable return type with the given configuration.\nThis includes let-bound functions in a module.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#All","title":"Check.All","content":"Check.All \nAll \n\nCheck all public static methods on the given type that have a testable return type with the given configuration.\nThis includes let-bound functions in a module.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#Method","title":"Check.Method","content":"Check.Method \nMethod \n\nCheck the given property identified by the given MethodInfo.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#One","title":"Check.One","content":"Check.One \nOne \n\nCheck the given property using the given config, and the given test name.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#One","title":"Check.One","content":"Check.One \nOne \n\nCheck the given property using the given config.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#Quick","title":"Check.Quick","content":"Check.Quick \nQuick \n\nCheck one property with the quick configuration, and using the given name.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#Quick","title":"Check.Quick","content":"Check.Quick \nQuick \n\nCheck one property with the quick configuration.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#QuickAll","title":"Check.QuickAll","content":"Check.QuickAll \nQuickAll \n\nCheck all public static methods on the given type that have a testable return type with quick configuration\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#QuickAll","title":"Check.QuickAll","content":"Check.QuickAll \nQuickAll \n\nCheck all public static methods on the given type that have a testable return type with quick configuration\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#QuickThrowOnFailure","title":"Check.QuickThrowOnFailure","content":"Check.QuickThrowOnFailure \nQuickThrowOnFailure \n\nCheck one property with the quick configuration, and throw an exception if it fails or is exhausted.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#QuickThrowOnFailureAll","title":"Check.QuickThrowOnFailureAll","content":"Check.QuickThrowOnFailureAll \nQuickThrowOnFailureAll \n\nCheck all public static methods on the given type that have a testable return type with quick configuration\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#QuickThrowOnFailureAll","title":"Check.QuickThrowOnFailureAll","content":"Check.QuickThrowOnFailureAll \nQuickThrowOnFailureAll \n\nCheck all public static methods on the given type that have a testable return type with quick configuration, \nand throw on failure or exhaustion.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#Verbose","title":"Check.Verbose","content":"Check.Verbose \nVerbose \n\nCheck one property with the verbose configuration, and using the given name.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#Verbose","title":"Check.Verbose","content":"Check.Verbose \nVerbose \n\nCheck one property with the verbose configuration.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#VerboseAll","title":"Check.VerboseAll","content":"Check.VerboseAll \nVerboseAll \n\n Check all public static methods on the given type that have a testable return type with the verbose configuration\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#VerboseAll","title":"Check.VerboseAll","content":"Check.VerboseAll \nVerboseAll \n\n Check all public static methods on the given type that have a testable return type with the verbose configuration\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#VerboseThrowOnFailure","title":"Check.VerboseThrowOnFailure","content":"Check.VerboseThrowOnFailure \nVerboseThrowOnFailure \n\nCheck one property with the verbose configuration, and throw an exception if it fails or is exhausted.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#VerboseThrowOnFailureAll","title":"Check.VerboseThrowOnFailureAll","content":"Check.VerboseThrowOnFailureAll \nVerboseThrowOnFailureAll \n\n Check all public static methods on the given type that have a testable return type with the verbose configuration,\nand throws on failure or exhaustion.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-check.html#VerboseThrowOnFailureAll","title":"Check.VerboseThrowOnFailureAll","content":"Check.VerboseThrowOnFailureAll \nVerboseThrowOnFailureAll \n\n Check all public static methods on the given type that have a testable return type with the verbose configuration,\nand throws on failure or exhaustion.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-checkextensions.html","title":"CheckExtensions","content":"CheckExtensions \n \nCheckExtensions.Check \nCheck \nCheckExtensions.QuickCheck \nQuickCheck \nCheckExtensions.QuickCheck \nQuickCheck \nCheckExtensions.QuickCheckThrowOnFailure \nQuickCheckThrowOnFailure \nCheckExtensions.VerboseCheck \nVerboseCheck \nCheckExtensions.VerboseCheck \nVerboseCheck \nCheckExtensions.VerboseCheckThrowOnFailure \nVerboseCheckThrowOnFailure"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-checkextensions.html#Check","title":"CheckExtensions.Check","content":"CheckExtensions.Check \nCheck \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-checkextensions.html#QuickCheck","title":"CheckExtensions.QuickCheck","content":"CheckExtensions.QuickCheck \nQuickCheck \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-checkextensions.html#QuickCheck","title":"CheckExtensions.QuickCheck","content":"CheckExtensions.QuickCheck \nQuickCheck \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-checkextensions.html#QuickCheckThrowOnFailure","title":"CheckExtensions.QuickCheckThrowOnFailure","content":"CheckExtensions.QuickCheckThrowOnFailure \nQuickCheckThrowOnFailure \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-checkextensions.html#VerboseCheck","title":"CheckExtensions.VerboseCheck","content":"CheckExtensions.VerboseCheck \nVerboseCheck \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-checkextensions.html#VerboseCheck","title":"CheckExtensions.VerboseCheck","content":"CheckExtensions.VerboseCheck \nVerboseCheck \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-checkextensions.html#VerboseCheckThrowOnFailure","title":"CheckExtensions.VerboseCheckThrowOnFailure","content":"CheckExtensions.VerboseCheckThrowOnFailure \nVerboseCheckThrowOnFailure \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command-2.html","title":"Command<'Actual, 'Model>","content":"Command<'Actual, 'Model> \n\nA single command describes pre and post conditions and the model for a single method under test.\nThe post-conditions are the invariants that will be checked; when these do not hold the test fails.\n \nCommand<'Actual, 'Model>.( .ctor ) \n( .ctor ) \nCommand<'Actual, 'Model>.Post \nPost \nCommand<'Actual, 'Model>.Pre \nPre \nCommand<'Actual, 'Model>.RunActual \nRunActual \nCommand<'Actual, 'Model>.RunModel \nRunModel"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command-2.html#( .ctor )","title":"Command<'Actual, 'Model>.( .ctor )","content":"Command<'Actual, 'Model>.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command-2.html#Post","title":"Command<'Actual, 'Model>.Post","content":"Command<'Actual, 'Model>.Post \nPost \n\nPostcondition that must hold after execution of the command. Compares state of model and actual\nobject and fails the property if they do not match.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command-2.html#Pre","title":"Command<'Actual, 'Model>.Pre","content":"Command<'Actual, 'Model>.Pre \nPre \n\nPrecondition for execution of the command. When this does not hold, the test continues\nbut the command will not be executed.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command-2.html#RunActual","title":"Command<'Actual, 'Model>.RunActual","content":"Command<'Actual, 'Model>.RunActual \nRunActual \n\nExcecutes the command on the actual object under test.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-command-2.html#RunModel","title":"Command<'Actual, 'Model>.RunModel","content":"Command<'Actual, 'Model>.RunModel \nRunModel \n\nExecutes the command on the model of the object.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-commandextensions.html","title":"CommandExtensions","content":"CommandExtensions \n \nCommandExtensions.ToProperty \nToProperty \nCommandExtensions.ToProperty \nToProperty"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-commandextensions.html#ToProperty","title":"CommandExtensions.ToProperty","content":"CommandExtensions.ToProperty \nToProperty \n\nTurn a specification into a property, allowing you to specify generator and shrinker.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-commandextensions.html#ToProperty","title":"CommandExtensions.ToProperty","content":"CommandExtensions.ToProperty \nToProperty \n\nTurn a specification into a property.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html","title":"Config","content":"Config \n\nFor configuring a run.\n \nConfig.VerboseThrowOnFailure \nVerboseThrowOnFailure \nConfig.Verbose \nVerbose \nConfig.QuickThrowOnFailure \nQuickThrowOnFailure \nConfig.Quick \nQuick \nConfig.Default \nDefault \nConfig.MaxTest \nMaxTest \nConfig.MaxFail \nMaxFail \nConfig.Replay \nReplay \nConfig.Name \nName \nConfig.StartSize \nStartSize \nConfig.EndSize \nEndSize \nConfig.QuietOnSuccess \nQuietOnSuccess \nConfig.Every \nEvery \nConfig.EveryShrink \nEveryShrink \nConfig.Arbitrary \nArbitrary \nConfig.Runner \nRunner"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#VerboseThrowOnFailure","title":"Config.VerboseThrowOnFailure","content":"Config.VerboseThrowOnFailure \nVerboseThrowOnFailure \n\nLike the Verbose configuration, only throws an exception with the error message if the test fails or is exhausted.\nUseful for use within other unit testing frameworks that usually adopt this methodolgy to signal failure.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#Verbose","title":"Config.Verbose","content":"Config.Verbose \nVerbose \n\nThe verbose configuration prints each generated argument.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#QuickThrowOnFailure","title":"Config.QuickThrowOnFailure","content":"Config.QuickThrowOnFailure \nQuickThrowOnFailure \n\nLike the Quick configuration, only throws an exception with the error message if the test fails or is exhausted.\nUseful for use within other unit testing frameworks that usually adopt this methodolgy to signal failure.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#Quick","title":"Config.Quick","content":"Config.Quick \nQuick \n\nThe quick configuration only prints a summary result at the end of the test.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#Default","title":"Config.Default","content":"Config.Default \nDefault \n\nThe default configuration is the quick configuration.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#MaxTest","title":"Config.MaxTest","content":"Config.MaxTest \nMaxTest \n\nThe maximum number of tests that are run.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#MaxFail","title":"Config.MaxFail","content":"Config.MaxFail \nMaxFail \n\nThe maximum number of tests where values are rejected, e.g. as the result of ==>\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#Replay","title":"Config.Replay","content":"Config.Replay \nReplay \n\nIf set, the seed to use to start testing. Allows reproduction of previous runs.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#Name","title":"Config.Name","content":"Config.Name \nName \n\nName of the test.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#StartSize","title":"Config.StartSize","content":"Config.StartSize \nStartSize \n\nThe size to use for the first test.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#EndSize","title":"Config.EndSize","content":"Config.EndSize \nEndSize \n\nThe size to use for the last test, when all the tests are passing. The size increases linearly between Start- and EndSize.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#QuietOnSuccess","title":"Config.QuietOnSuccess","content":"Config.QuietOnSuccess \nQuietOnSuccess \n\nIf set, suppresses the output from the test if the test is successful.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#Every","title":"Config.Every","content":"Config.Every \nEvery \n\nWhat to print when new arguments args are generated in test n\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#EveryShrink","title":"Config.EveryShrink","content":"Config.EveryShrink \nEveryShrink \n\nWhat to print every time a counter-example is succesfully shrunk\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#Arbitrary","title":"Config.Arbitrary","content":"Config.Arbitrary \nArbitrary \n\nThe Arbitrary instances on this class will be merged in back to front order, i.e. instances for the same generated type at the front\nof the list will override those at the back. The instances on Arb.Default are always known, and are at the back (so they can always be\noverridden)\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-config.html#Runner","title":"Config.Runner","content":"Config.Runner \nRunner \n\nA custom test runner, e.g. to integrate with a test framework like xUnit or NUnit. \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html","title":"Configuration","content":"Configuration \n\nConfigure the test run with a quick configuration.\n \nConfiguration.( .ctor ) \n( .ctor ) \nConfiguration.StartSize \nStartSize \nConfiguration.Runner \nRunner \nConfiguration.Replay \nReplay \nConfiguration.QuietOnSuccess \nQuietOnSuccess \nConfiguration.Name \nName \nConfiguration.MaxNbOfTest \nMaxNbOfTest \nConfiguration.MaxNbOfFailedTests \nMaxNbOfFailedTests \nConfiguration.EveryShrink \nEveryShrink \nConfiguration.Every \nEvery \nConfiguration.EndSize \nEndSize \nConfiguration.VerboseThrowOnFailure \nVerboseThrowOnFailure \nConfiguration.Verbose \nVerbose \nConfiguration.QuickThrowOnFailure \nQuickThrowOnFailure \nConfiguration.Quick \nQuick \nConfiguration.Default \nDefault"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#( .ctor )","title":"Configuration.( .ctor )","content":"Configuration.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#StartSize","title":"Configuration.StartSize","content":"Configuration.StartSize \nStartSize \n\nThe size to use for the first test.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#Runner","title":"Configuration.Runner","content":"Configuration.Runner \nRunner \n\nA custom test runner, e.g. to integrate with a test framework like xUnit or NUnit. \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#Replay","title":"Configuration.Replay","content":"Configuration.Replay \nReplay \n\nIf set, the seed to use to start testing. Allows reproduction of previous runs.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#QuietOnSuccess","title":"Configuration.QuietOnSuccess","content":"Configuration.QuietOnSuccess \nQuietOnSuccess \n\nIf set, suppresses the output from the test if the test is successful.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#Name","title":"Configuration.Name","content":"Configuration.Name \nName \n\nName of the test.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#MaxNbOfTest","title":"Configuration.MaxNbOfTest","content":"Configuration.MaxNbOfTest \nMaxNbOfTest \n\nThe maximum number of tests that are run.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#MaxNbOfFailedTests","title":"Configuration.MaxNbOfFailedTests","content":"Configuration.MaxNbOfFailedTests \nMaxNbOfFailedTests \n\nThe maximum number of tests where values are rejected\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#EveryShrink","title":"Configuration.EveryShrink","content":"Configuration.EveryShrink \nEveryShrink \n\nWhat to print every time a counter-example is succesfully shrunk\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#Every","title":"Configuration.Every","content":"Configuration.Every \nEvery \n\nWhat to print when new arguments args are generated in test n\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#EndSize","title":"Configuration.EndSize","content":"Configuration.EndSize \nEndSize \n\nThe size to use for the last test, when all the tests are passing. The size increases linearly between Start- and EndSize.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#VerboseThrowOnFailure","title":"Configuration.VerboseThrowOnFailure","content":"Configuration.VerboseThrowOnFailure \nVerboseThrowOnFailure \n\nLike the Verbose configuration, only throws an exception with the error message if the test fails or is exhausted.\nUseful for use within other unit testing frameworks that usually adopt this methodolgy to signal failure.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#Verbose","title":"Configuration.Verbose","content":"Configuration.Verbose \nVerbose \n\nThe verbose configuration prints each generated argument.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#QuickThrowOnFailure","title":"Configuration.QuickThrowOnFailure","content":"Configuration.QuickThrowOnFailure \nQuickThrowOnFailure \n\nLike the Quick configuration, only throws an exception with the error message if the test fails or is exhausted.\nUseful for use within other unit testing frameworks that usually adopt this methodolgy to signal failure.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#Quick","title":"Configuration.Quick","content":"Configuration.Quick \nQuick \n\nThe quick configuration only prints a summary result at the end of the test.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-configuration.html#Default","title":"Configuration.Default","content":"Configuration.Default \nDefault \n\nThe default configuration is the quick configuration.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-donotshrink-1.html","title":"DoNotShrink<'a>","content":"DoNotShrink<'a> \n\nUse the generator for 'a, but don't shrink.\n \nDoNotShrink<'a>.DoNotShrink \nDoNotShrink"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-donotshrink-1.html#DoNotShrink","title":"DoNotShrink<'a>.DoNotShrink","content":"DoNotShrink<'a>.DoNotShrink \nDoNotShrink \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-donotsize-1.html","title":"DoNotSize<'a>","content":"DoNotSize<'a> \n\nWhereas most types are restricted by a size that grows\nas the test gets further, by applying this type the underlying\ntype will ignore this size and always generate from the full range.\nNote that this only makes a difference for types that have a range -\ncurrently integer types, TimeSpan and Decimal have DoNotSize Arbitrary instances.\nThis is typically (and at least currently) only applicable for value types\nthat are comparable, hence the type constraints.\n \nDoNotSize<'a>.Unwrap \nUnwrap \nDoNotSize<'a>.DoNotSize \nDoNotSize"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-donotsize-1.html#Unwrap","title":"DoNotSize<'a>.Unwrap","content":"DoNotSize<'a>.Unwrap \nUnwrap \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-donotsize-1.html#DoNotSize","title":"DoNotSize<'a>.DoNotSize","content":"DoNotSize<'a>.DoNotSize \nDoNotSize \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-dontshrink-1.html","title":"DontShrink<'a>","content":"DontShrink<'a> \n\nUse the generator for 'a, but don't shrink.\n \nDontShrink<'a>.DontShrink \nDontShrink"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-dontshrink-1.html#DontShrink","title":"DontShrink<'a>.DontShrink","content":"DontShrink<'a>.DontShrink \nDontShrink \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-dontsize-1.html","title":"DontSize<'a>","content":"DontSize<'a> \n\nWhereas most types are restricted by a size that grows\nas the test gets further, by applying this type the underlying\ntype will ignore this size and always generate from the full range.\nNote that this only makes a difference for types that have a range -\ncurrently Int16, Int32, Int64 have DontSize Arbitrary instances.\nThis is typically (and at least currently) only applicable for value types\nthat are comparable, hence the type constraints.\n \nDontSize<'a>.Unwrap \nUnwrap \nDontSize<'a>.DontSize \nDontSize"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-dontsize-1.html#Unwrap","title":"DontSize<'a>.Unwrap","content":"DontSize<'a>.Unwrap \nUnwrap \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-dontsize-1.html#DontSize","title":"DontSize<'a>.DontSize","content":"DontSize<'a>.DontSize \nDontSize \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-fixedlengtharray-1.html","title":"FixedLengthArray<'a>","content":"FixedLengthArray<'a> \n\nRepresents an array whose length does not change when shrinking.\n \nFixedLengthArray<'a>.Get \nGet \nFixedLengthArray<'a>.toArray \ntoArray \nFixedLengthArray<'a>.FixedLengthArray \nFixedLengthArray"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-fixedlengtharray-1.html#Get","title":"FixedLengthArray<'a>.Get","content":"FixedLengthArray<'a>.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-fixedlengtharray-1.html#toArray","title":"FixedLengthArray<'a>.toArray","content":"FixedLengthArray<'a>.toArray \ntoArray \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-fixedlengtharray-1.html#FixedLengthArray","title":"FixedLengthArray<'a>.FixedLengthArray","content":"FixedLengthArray<'a>.FixedLengthArray \nFixedLengthArray \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-function-2.html","title":"Function<'a, 'b>","content":"Function<'a, 'b> \n\nA function (F# function) that can be displayed and shrunk.\n \nFunction<'a, 'b>.Value \nValue \nFunction<'a, 'b>.Table \nTable \nFunction<'a, 'b>.StructuredDisplayAsTable \nStructuredDisplayAsTable \nFunction<'a, 'b>.From \nFrom \nFunction<'a, 'b>.from \nfrom \nFunction<'a, 'b>.F \nF"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-function-2.html#Value","title":"Function<'a, 'b>.Value","content":"Function<'a, 'b>.Value \nValue \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-function-2.html#Table","title":"Function<'a, 'b>.Table","content":"Function<'a, 'b>.Table \nTable \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-function-2.html#StructuredDisplayAsTable","title":"Function<'a, 'b>.StructuredDisplayAsTable","content":"Function<'a, 'b>.StructuredDisplayAsTable \nStructuredDisplayAsTable \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-function-2.html#From","title":"Function<'a, 'b>.From","content":"Function<'a, 'b>.From \nFrom \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-function-2.html#from","title":"Function<'a, 'b>.from","content":"Function<'a, 'b>.from \nfrom \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-function-2.html#F","title":"Function<'a, 'b>.F","content":"Function<'a, 'b>.F \nF \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen-1.html","title":"Gen<'a>","content":"Gen<'a> \n\nGenerator of a random value, based on a size parameter and a randomly generated int.\n \nGen<'a>.( >>= ) \n( >>= ) \nGen<'a>.( <!> ) \n( <!> ) \nGen<'a>.( <*> ) \n( <*> )"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen-1.html#( >>= )","title":"Gen<'a>.( >>= )","content":"Gen<'a>.( >>= ) \n( >>= ) \n\n Bind operator; runs the first generator, then feeds the result\n to the second generator function.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen-1.html#( <!> )","title":"Gen<'a>.( <!> )","content":"Gen<'a>.( <!> ) \n( <!> ) \n\n Like <*>, but puts f in a Gen first.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-gen-1.html#( <*> )","title":"Gen<'a>.( <*> )","content":"Gen<'a>.( <*> ) \n( <*> ) \n\n Lifted function application = apply f to a, all in the Gen applicative functor.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html","title":"GenExtensions","content":"GenExtensions \n\nExtension methods to build generators - contains among other the Linq methods.\n \nGenExtensions.Apply \nApply \nGenExtensions.Array2DOf \nArray2DOf \nGenExtensions.Array2DOf \nArray2DOf \nGenExtensions.ArrayOf \nArrayOf \nGenExtensions.ArrayOf \nArrayOf \nGenExtensions.Cast \nCast \nGenExtensions.Eval \nEval \nGenExtensions.Four \nFour \nGenExtensions.ListOf \nListOf \nGenExtensions.ListOf \nListOf \nGenExtensions.NonEmptyListOf \nNonEmptyListOf \nGenExtensions.Or \nOr \nGenExtensions.OrNull \nOrNull \nGenExtensions.Resize \nResize \nGenExtensions.Sample \nSample \nGenExtensions.ScaleSize \nScaleSize \nGenExtensions.Select \nSelect \nGenExtensions.SelectMany \nSelectMany \nGenExtensions.SelectMany \nSelectMany \nGenExtensions.Three \nThree \nGenExtensions.ToArbitrary \nToArbitrary \nGenExtensions.ToArbitrary \nToArbitrary \nGenExtensions.Two \nTwo \nGenExtensions.Where \nWhere \nGenExtensions.Zip \nZip \nGenExtensions.Zip \nZip \nGenExtensions.Zip \nZip \nGenExtensions.Zip \nZip"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Apply","title":"GenExtensions.Apply","content":"GenExtensions.Apply \nApply \n\nApply the given Gen function to this generator, aka the applicative <*> operator.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Array2DOf","title":"GenExtensions.Array2DOf","content":"GenExtensions.Array2DOf \nArray2DOf \n\n Generates a 2D array. The square root of the size is the maximum number of rows and columns.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Array2DOf","title":"GenExtensions.Array2DOf","content":"GenExtensions.Array2DOf \nArray2DOf \n\n Generates a 2D array of the given dimensions.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#ArrayOf","title":"GenExtensions.ArrayOf","content":"GenExtensions.ArrayOf \nArrayOf \n\n Generates an array using the specified generator. \n The maximum length is size+1.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#ArrayOf","title":"GenExtensions.ArrayOf","content":"GenExtensions.ArrayOf \nArrayOf \n\n Generates an array of a specified length.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Cast","title":"GenExtensions.Cast","content":"GenExtensions.Cast \nCast \n\n Allows type annotations in LINQ expressions\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Eval","title":"GenExtensions.Eval","content":"GenExtensions.Eval \nEval \n\nGenerates a value with maximum size n.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Four","title":"GenExtensions.Four","content":"GenExtensions.Four \nFour \n\nBuild a generator that generates a 4-tuple of the values generated by the given generator.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#ListOf","title":"GenExtensions.ListOf","content":"GenExtensions.ListOf \nListOf \n\n Generates a list of random length. The maximum length depends on the\n size parameter.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#ListOf","title":"GenExtensions.ListOf","content":"GenExtensions.ListOf \nListOf \n\nGenerates a list of given length, containing values generated by the given generator.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#NonEmptyListOf","title":"GenExtensions.NonEmptyListOf","content":"GenExtensions.NonEmptyListOf \nNonEmptyListOf \n\n Generates a non-empty list of random length. The maximum length \n depends on the size parameter.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Or","title":"GenExtensions.Or","content":"GenExtensions.Or \nOr \n\nBuild a generator that generates a value from two generators with equal probability.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#OrNull","title":"GenExtensions.OrNull","content":"GenExtensions.OrNull \nOrNull \n\nBuild a generator that generates a value or `null`\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Resize","title":"GenExtensions.Resize","content":"GenExtensions.Resize \nResize \n\nOverride the current size of the test.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Sample","title":"GenExtensions.Sample","content":"GenExtensions.Sample \nSample \n\nGenerates n values of the given size.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#ScaleSize","title":"GenExtensions.ScaleSize","content":"GenExtensions.ScaleSize \nScaleSize \n\nModify a size using the given function before passing it to the given generator.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Select","title":"GenExtensions.Select","content":"GenExtensions.Select \nSelect \n\nMap the given function to the value in the generator, yielding a new generator of the result type.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#SelectMany","title":"GenExtensions.SelectMany","content":"GenExtensions.SelectMany \nSelectMany \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#SelectMany","title":"GenExtensions.SelectMany","content":"GenExtensions.SelectMany \nSelectMany \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Three","title":"GenExtensions.Three","content":"GenExtensions.Three \nThree \n\nBuild a generator that generates a 3-tuple of the values generated by the given generator.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#ToArbitrary","title":"GenExtensions.ToArbitrary","content":"GenExtensions.ToArbitrary \nToArbitrary \n\n Construct an Arbitrary instance from a generator and a shrinker.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#ToArbitrary","title":"GenExtensions.ToArbitrary","content":"GenExtensions.ToArbitrary \nToArbitrary \n\n Construct an Arbitrary instance from a generator.\n Shrink is not supported for this type.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Two","title":"GenExtensions.Two","content":"GenExtensions.Two \nTwo \n\nBuild a generator that generates a 2-tuple of the values generated by the given generator.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Where","title":"GenExtensions.Where","content":"GenExtensions.Where \nWhere \n\nGenerates a value that satisfies a predicate. This function keeps re-trying\nby increasing the size of the original generator ad infinitum.  Make sure there is a high chance that \nthe predicate is satisfied.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Zip","title":"GenExtensions.Zip","content":"GenExtensions.Zip \nZip \n\nCombine three generators into a new generator of the result of the given result selector.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Zip","title":"GenExtensions.Zip","content":"GenExtensions.Zip \nZip \n\nCombine three generators into a generator of 3-tuples.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Zip","title":"GenExtensions.Zip","content":"GenExtensions.Zip \nZip \n\nCombine two generators into a new generator of the result of the given result selector.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-genextensions.html#Zip","title":"GenExtensions.Zip","content":"GenExtensions.Zip \nZip \n\nCombine two generators into a generator of pairs.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-hostname.html","title":"HostName","content":"HostName \n \nHostName.HostName \nHostName"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-hostname.html#HostName","title":"HostName.HostName","content":"HostName.HostName \nHostName \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-icommandgenerator-2.html","title":"ICommandGenerator<'Actual, 'Model>","content":"ICommandGenerator<'Actual, 'Model> \n\nDefines the initial state for actual and model object, and allows to define the generator to use\nfor the next state, based on the model.\n \nICommandGenerator<'Actual, 'Model>.Next \nNext \nICommandGenerator<'Actual, 'Model>.InitialModel \nInitialModel \nICommandGenerator<'Actual, 'Model>.InitialActual \nInitialActual"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-icommandgenerator-2.html#Next","title":"ICommandGenerator<'Actual, 'Model>.Next","content":"ICommandGenerator<'Actual, 'Model>.Next \nNext \n\nGenerate a number of possible commands based on the current state of the model. \nPreconditions are still checked, so even if a Command is returned, it is not chosen\nif its precondition does not hold.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-icommandgenerator-2.html#InitialModel","title":"ICommandGenerator<'Actual, 'Model>.InitialModel","content":"ICommandGenerator<'Actual, 'Model>.InitialModel \nInitialModel \n\nInitial state of model object. Should correspond to initial state of actual object.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-icommandgenerator-2.html#InitialActual","title":"ICommandGenerator<'Actual, 'Model>.InitialActual","content":"ICommandGenerator<'Actual, 'Model>.InitialActual \nInitialActual \n\nInitial state of actual object. Should correspond to initial state of model object.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-ipv4address.html","title":"IPv4Address","content":"IPv4Address \n \nIPv4Address.IPv4Address \nIPv4Address"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-ipv4address.html#IPv4Address","title":"IPv4Address.IPv4Address","content":"IPv4Address.IPv4Address \nIPv4Address \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-ipv6address.html","title":"IPv6Address","content":"IPv6Address \n \nIPv6Address.IPv6Address \nIPv6Address"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-ipv6address.html#IPv6Address","title":"IPv6Address.IPv6Address","content":"IPv6Address.IPv6Address \nIPv6Address \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-irunner.html","title":"IRunner","content":"IRunner \n\nFor implementing your own test runner.\n \nIRunner.OnArguments \nOnArguments \nIRunner.OnFinished \nOnFinished \nIRunner.OnShrink \nOnShrink \nIRunner.OnStartFixture \nOnStartFixture"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-irunner.html#OnArguments","title":"IRunner.OnArguments","content":"IRunner.OnArguments \nOnArguments \n\nCalled whenever arguments are generated and after the test is run.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-irunner.html#OnFinished","title":"IRunner.OnFinished","content":"IRunner.OnFinished \nOnFinished \n\nCalled whenever all tests are done, either True, False or Exhausted.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-irunner.html#OnShrink","title":"IRunner.OnShrink","content":"IRunner.OnShrink \nOnShrink \n\nCalled on a succesful shrink.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-irunner.html#OnStartFixture","title":"IRunner.OnStartFixture","content":"IRunner.OnStartFixture \nOnStartFixture \n\nCalled before a group of properties on a type are checked.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-intwithminmax.html","title":"IntWithMinMax","content":"IntWithMinMax \n\nRepresents an int that can include int.MinValue and int.MaxValue.\n \nIntWithMinMax.Get \nGet \nIntWithMinMax.op_Explicit \nop_Explicit \nIntWithMinMax.IntWithMinMax \nIntWithMinMax"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-intwithminmax.html#Get","title":"IntWithMinMax.Get","content":"IntWithMinMax.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-intwithminmax.html#op_Explicit","title":"IntWithMinMax.op_Explicit","content":"IntWithMinMax.op_Explicit \nop_Explicit \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-intwithminmax.html#IntWithMinMax","title":"IntWithMinMax.IntWithMinMax","content":"IntWithMinMax.IntWithMinMax \nIntWithMinMax \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-interval.html","title":"Interval","content":"Interval \n\nRepresents an integer interval.\n \nInterval.Right \nRight \nInterval.Left \nLeft \nInterval.Interval \nInterval"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-interval.html#Right","title":"Interval.Right","content":"Interval.Right \nRight \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-interval.html#Left","title":"Interval.Left","content":"Interval.Left \nLeft \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-interval.html#Interval","title":"Interval.Interval","content":"Interval.Interval \nInterval \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-negativeint.html","title":"NegativeInt","content":"NegativeInt \n\nRepresents an int < 0\n \nNegativeInt.Get \nGet \nNegativeInt.op_Explicit \nop_Explicit \nNegativeInt.NegativeInt \nNegativeInt"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-negativeint.html#Get","title":"NegativeInt.Get","content":"NegativeInt.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-negativeint.html#op_Explicit","title":"NegativeInt.op_Explicit","content":"NegativeInt.op_Explicit \nop_Explicit \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-negativeint.html#NegativeInt","title":"NegativeInt.NegativeInt","content":"NegativeInt.NegativeInt \nNegativeInt \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonemptyarray-1.html","title":"NonEmptyArray<'a>","content":"NonEmptyArray<'a> \n\nRepresents a non-empty array.\n \nNonEmptyArray<'a>.Get \nGet \nNonEmptyArray<'a>.toArray \ntoArray \nNonEmptyArray<'a>.NonEmptyArray \nNonEmptyArray"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonemptyarray-1.html#Get","title":"NonEmptyArray<'a>.Get","content":"NonEmptyArray<'a>.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonemptyarray-1.html#toArray","title":"NonEmptyArray<'a>.toArray","content":"NonEmptyArray<'a>.toArray \ntoArray \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonemptyarray-1.html#NonEmptyArray","title":"NonEmptyArray<'a>.NonEmptyArray","content":"NonEmptyArray<'a>.NonEmptyArray \nNonEmptyArray \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonemptyset-1.html","title":"NonEmptySet<'a>","content":"NonEmptySet<'a> \n\nRepresents a non-empty Set.\n \nNonEmptySet<'a>.Get \nGet \nNonEmptySet<'a>.toSet \ntoSet \nNonEmptySet<'a>.NonEmptySet \nNonEmptySet"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonemptyset-1.html#Get","title":"NonEmptySet<'a>.Get","content":"NonEmptySet<'a>.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonemptyset-1.html#toSet","title":"NonEmptySet<'a>.toSet","content":"NonEmptySet<'a>.toSet \ntoSet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonemptyset-1.html#NonEmptySet","title":"NonEmptySet<'a>.NonEmptySet","content":"NonEmptySet<'a>.NonEmptySet \nNonEmptySet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonemptystring.html","title":"NonEmptyString","content":"NonEmptyString \n\nRepresents a string that is not null or empty, and does not contain any null characters ('\\000')\n \nNonEmptyString.Get \nGet \nNonEmptyString.NonEmptyString \nNonEmptyString"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonemptystring.html#Get","title":"NonEmptyString.Get","content":"NonEmptyString.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonemptystring.html#NonEmptyString","title":"NonEmptyString.NonEmptyString","content":"NonEmptyString.NonEmptyString \nNonEmptyString \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonnegativeint.html","title":"NonNegativeInt","content":"NonNegativeInt \n\nRepresents an int >= 0\n \nNonNegativeInt.Get \nGet \nNonNegativeInt.op_Explicit \nop_Explicit \nNonNegativeInt.NonNegativeInt \nNonNegativeInt"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonnegativeint.html#Get","title":"NonNegativeInt.Get","content":"NonNegativeInt.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonnegativeint.html#op_Explicit","title":"NonNegativeInt.op_Explicit","content":"NonNegativeInt.op_Explicit \nop_Explicit \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonnegativeint.html#NonNegativeInt","title":"NonNegativeInt.NonNegativeInt","content":"NonNegativeInt.NonNegativeInt \nNonNegativeInt \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonnull-1.html","title":"NonNull<'a>","content":"NonNull<'a> \n\nWrap a type in NonNull to prevent null being generated for the wrapped type.\n \nNonNull<'a>.Get \nGet \nNonNull<'a>.NonNull \nNonNull"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonnull-1.html#Get","title":"NonNull<'a>.Get","content":"NonNull<'a>.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonnull-1.html#NonNull","title":"NonNull<'a>.NonNull","content":"NonNull<'a>.NonNull \nNonNull \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonwhitespacestring.html","title":"NonWhiteSpaceString","content":"NonWhiteSpaceString \n \nNonWhiteSpaceString.Get \nGet \nNonWhiteSpaceString.NonWhiteSpaceString \nNonWhiteSpaceString"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonwhitespacestring.html#Get","title":"NonWhiteSpaceString.Get","content":"NonWhiteSpaceString.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonwhitespacestring.html#NonWhiteSpaceString","title":"NonWhiteSpaceString.NonWhiteSpaceString","content":"NonWhiteSpaceString.NonWhiteSpaceString \nNonWhiteSpaceString \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonzeroint.html","title":"NonZeroInt","content":"NonZeroInt \n\nRepresents an int <> 0\n \nNonZeroInt.Get \nGet \nNonZeroInt.op_Explicit \nop_Explicit \nNonZeroInt.NonZeroInt \nNonZeroInt"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonzeroint.html#Get","title":"NonZeroInt.Get","content":"NonZeroInt.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonzeroint.html#op_Explicit","title":"NonZeroInt.op_Explicit","content":"NonZeroInt.op_Explicit \nop_Explicit \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-nonzeroint.html#NonZeroInt","title":"NonZeroInt.NonZeroInt","content":"NonZeroInt.NonZeroInt \nNonZeroInt \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-normalfloat.html","title":"NormalFloat","content":"NormalFloat \n\nRepresents a float that is not NaN or Infinity.\n \nNormalFloat.Get \nGet \nNormalFloat.get \nget \nNormalFloat.op_Explicit \nop_Explicit \nNormalFloat.NormalFloat \nNormalFloat"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-normalfloat.html#Get","title":"NormalFloat.Get","content":"NormalFloat.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-normalfloat.html#get","title":"NormalFloat.get","content":"NormalFloat.get \nget \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-normalfloat.html#op_Explicit","title":"NormalFloat.op_Explicit","content":"NormalFloat.op_Explicit \nop_Explicit \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-normalfloat.html#NormalFloat","title":"NormalFloat.NormalFloat","content":"NormalFloat.NormalFloat \nNormalFloat \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-outcome.html","title":"Outcome","content":"Outcome \n \nOutcome.Timeout \nTimeout \nOutcome.Exception \nException \nOutcome.False \nFalse \nOutcome.True \nTrue \nOutcome.Rejected \nRejected"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-outcome.html#Timeout","title":"Outcome.Timeout","content":"Outcome.Timeout \nTimeout \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-outcome.html#Exception","title":"Outcome.Exception","content":"Outcome.Exception \nException \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-outcome.html#False","title":"Outcome.False","content":"Outcome.False \nFalse \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-outcome.html#True","title":"Outcome.True","content":"Outcome.True \nTrue \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-outcome.html#Rejected","title":"Outcome.Rejected","content":"Outcome.Rejected \nRejected \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-positiveint.html","title":"PositiveInt","content":"PositiveInt \n\nRepresents an int > 0\n \nPositiveInt.Get \nGet \nPositiveInt.op_Explicit \nop_Explicit \nPositiveInt.PositiveInt \nPositiveInt"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-positiveint.html#Get","title":"PositiveInt.Get","content":"PositiveInt.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-positiveint.html#op_Explicit","title":"PositiveInt.op_Explicit","content":"PositiveInt.op_Explicit \nop_Explicit \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-positiveint.html#PositiveInt","title":"PositiveInt.PositiveInt","content":"PositiveInt.PositiveInt \nPositiveInt \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-property.html","title":"Property","content":"Property \n\nA Property can be checked by FsCheck.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html","title":"PropertyExtensions","content":"PropertyExtensions \n\nExtensons to construct Properties.\n \nPropertyExtensions.And \nAnd \nPropertyExtensions.And \nAnd \nPropertyExtensions.And \nAnd \nPropertyExtensions.And \nAnd \nPropertyExtensions.And \nAnd \nPropertyExtensions.And \nAnd \nPropertyExtensions.And \nAnd \nPropertyExtensions.And \nAnd \nPropertyExtensions.Classify \nClassify \nPropertyExtensions.Classify \nClassify \nPropertyExtensions.Classify \nClassify \nPropertyExtensions.Classify \nClassify \nPropertyExtensions.Collect \nCollect \nPropertyExtensions.Collect \nCollect \nPropertyExtensions.Collect \nCollect \nPropertyExtensions.Collect \nCollect \nPropertyExtensions.Implies \nImplies \nPropertyExtensions.Implies \nImplies \nPropertyExtensions.Implies \nImplies \nPropertyExtensions.Implies \nImplies \nPropertyExtensions.Label \nLabel \nPropertyExtensions.Label \nLabel \nPropertyExtensions.Label \nLabel \nPropertyExtensions.Label \nLabel \nPropertyExtensions.Or \nOr \nPropertyExtensions.Or \nOr \nPropertyExtensions.Or \nOr \nPropertyExtensions.Or \nOr \nPropertyExtensions.Or \nOr \nPropertyExtensions.Or \nOr \nPropertyExtensions.Or \nOr \nPropertyExtensions.Or \nOr \nPropertyExtensions.ToProperty \nToProperty \nPropertyExtensions.ToProperty \nToProperty \nPropertyExtensions.ToProperty \nToProperty \nPropertyExtensions.Trivial \nTrivial \nPropertyExtensions.Trivial \nTrivial \nPropertyExtensions.Trivial \nTrivial \nPropertyExtensions.Trivial \nTrivial \nPropertyExtensions.When \nWhen \nPropertyExtensions.When \nWhen \nPropertyExtensions.When \nWhen \nPropertyExtensions.When \nWhen"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#And","title":"PropertyExtensions.And","content":"PropertyExtensions.And \nAnd \n\nConstruct a property that succeeds if both succeed. (cfr 'and')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#And","title":"PropertyExtensions.And","content":"PropertyExtensions.And \nAnd \n\nConstruct a property that succeeds if both succeed. (cfr 'and')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#And","title":"PropertyExtensions.And","content":"PropertyExtensions.And \nAnd \n\nConstruct a property that succeeds if both succeed. (cfr 'and')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#And","title":"PropertyExtensions.And","content":"PropertyExtensions.And \nAnd \n\nConstruct a property that succeeds if both succeed. (cfr 'and')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#And","title":"PropertyExtensions.And","content":"PropertyExtensions.And \nAnd \n\nConstruct a property that succeeds if both succeed. (cfr 'and')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#And","title":"PropertyExtensions.And","content":"PropertyExtensions.And \nAnd \n\nConstruct a property that succeeds if both succeed. (cfr 'and')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#And","title":"PropertyExtensions.And","content":"PropertyExtensions.And \nAnd \n\nConstruct a property that succeeds if both succeed. (cfr 'and')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#And","title":"PropertyExtensions.And","content":"PropertyExtensions.And \nAnd \n\nConstruct a property that succeeds if both succeed. (cfr 'and')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Classify","title":"PropertyExtensions.Classify","content":"PropertyExtensions.Classify \nClassify \n\nClassify test cases. Test cases satisfying the condition are assigned the classification given.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Classify","title":"PropertyExtensions.Classify","content":"PropertyExtensions.Classify \nClassify \n\nClassify test cases. Test cases satisfying the condition are assigned the classification given.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Classify","title":"PropertyExtensions.Classify","content":"PropertyExtensions.Classify \nClassify \n\nClassify test cases. Test cases satisfying the condition are assigned the classification given.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Classify","title":"PropertyExtensions.Classify","content":"PropertyExtensions.Classify \nClassify \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Collect","title":"PropertyExtensions.Collect","content":"PropertyExtensions.Collect \nCollect \n\nCollect data values. The argument of collect is evaluated in each test case, \nand the distribution of values is reported.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Collect","title":"PropertyExtensions.Collect","content":"PropertyExtensions.Collect \nCollect \n\nCollect data values. The argument of collect is evaluated in each test case, \nand the distribution of values is reported.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Collect","title":"PropertyExtensions.Collect","content":"PropertyExtensions.Collect \nCollect \n\nCollect data values. The argument of collect is evaluated in each test case, \nand the distribution of values is reported.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Collect","title":"PropertyExtensions.Collect","content":"PropertyExtensions.Collect \nCollect \n\nCollect data values. The argument of collect is evaluated in each test case, \nand the distribution of values is reported.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Implies","title":"PropertyExtensions.Implies","content":"PropertyExtensions.Implies \nImplies \n\nConditional property combinator. Resulting property holds if the property holds when the condition does.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Implies","title":"PropertyExtensions.Implies","content":"PropertyExtensions.Implies \nImplies \n\nConditional property combinator. Resulting property holds if the property holds when the condition does.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Implies","title":"PropertyExtensions.Implies","content":"PropertyExtensions.Implies \nImplies \n\nConditional property combinator. Resulting property holds if the property holds when the condition does.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Implies","title":"PropertyExtensions.Implies","content":"PropertyExtensions.Implies \nImplies \n\nConditional property combinator. Resulting property holds if the property holds when the condition does.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Label","title":"PropertyExtensions.Label","content":"PropertyExtensions.Label \nLabel \n\nAdd the given label to the property. The labels of a failing sub-property are displayed when it fails.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Label","title":"PropertyExtensions.Label","content":"PropertyExtensions.Label \nLabel \n\nAdd the given label to the property. The labels of a failing sub-property are displayed when it fails.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Label","title":"PropertyExtensions.Label","content":"PropertyExtensions.Label \nLabel \n\nAdd the given label to the property. The labels of a failing sub-property are displayed when it fails.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Label","title":"PropertyExtensions.Label","content":"PropertyExtensions.Label \nLabel \n\nAdd the given label to the property. The labels of a failing sub-property are displayed when it fails.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Or","title":"PropertyExtensions.Or","content":"PropertyExtensions.Or \nOr \n\nConstruct a property that fails if both fail. (cfr 'or')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Or","title":"PropertyExtensions.Or","content":"PropertyExtensions.Or \nOr \n\nConstruct a property that fails if both fail. (cfr 'or')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Or","title":"PropertyExtensions.Or","content":"PropertyExtensions.Or \nOr \n\nConstruct a property that fails if both fail. (cfr 'or')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Or","title":"PropertyExtensions.Or","content":"PropertyExtensions.Or \nOr \n\nConstruct a property that fails if both fail. (cfr 'or')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Or","title":"PropertyExtensions.Or","content":"PropertyExtensions.Or \nOr \n\nConstruct a property that fails if both fail. (cfr 'or')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Or","title":"PropertyExtensions.Or","content":"PropertyExtensions.Or \nOr \n\nConstruct a property that fails if both fail. (cfr 'or')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Or","title":"PropertyExtensions.Or","content":"PropertyExtensions.Or \nOr \n\nConstruct a property that fails if both fail. (cfr 'or')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Or","title":"PropertyExtensions.Or","content":"PropertyExtensions.Or \nOr \n\nConstruct a property that fails if both fail. (cfr 'or')\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#ToProperty","title":"PropertyExtensions.ToProperty","content":"PropertyExtensions.ToProperty \nToProperty \n\n Turns a testable type into a property.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#ToProperty","title":"PropertyExtensions.ToProperty","content":"PropertyExtensions.ToProperty \nToProperty \n\n Turns a testable type into a property.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#ToProperty","title":"PropertyExtensions.ToProperty","content":"PropertyExtensions.ToProperty \nToProperty \n\n Turns a testable type into a property.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Trivial","title":"PropertyExtensions.Trivial","content":"PropertyExtensions.Trivial \nTrivial \n\nCount trivial cases. Test cases for which the condition is True are classified as trivial.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Trivial","title":"PropertyExtensions.Trivial","content":"PropertyExtensions.Trivial \nTrivial \n\nCount trivial cases. Test cases for which the condition is True are classified as trivial.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Trivial","title":"PropertyExtensions.Trivial","content":"PropertyExtensions.Trivial \nTrivial \n\nCount trivial cases. Test cases for which the condition is True are classified as trivial.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#Trivial","title":"PropertyExtensions.Trivial","content":"PropertyExtensions.Trivial \nTrivial \n\nCount trivial cases. Test cases for which the condition is True are classified as trivial.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#When","title":"PropertyExtensions.When","content":"PropertyExtensions.When \nWhen \n\nConditional property combinator. Resulting property holds if the property holds when the condition does.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#When","title":"PropertyExtensions.When","content":"PropertyExtensions.When \nWhen \n\nConditional property combinator. Resulting property holds if the property holds when the condition does.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#When","title":"PropertyExtensions.When","content":"PropertyExtensions.When \nWhen \n\nConditional property combinator. Resulting property holds if the property holds when the condition does.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-propertyextensions.html#When","title":"PropertyExtensions.When","content":"PropertyExtensions.When \nWhen \n\nConditional property combinator. Resulting property holds if the property holds when the condition does.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-result.html","title":"Result","content":"Result \n\nThe result of one execution of a property.\n \nResult.( &&& ) \n( &&& ) \nResult.( ||| ) \n( ||| ) \nResult.Outcome \nOutcome \nResult.Stamp \nStamp \nResult.Labels \nLabels \nResult.Arguments \nArguments"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-result.html#( &&& )","title":"Result.( &&& )","content":"Result.( &&& ) \n( &&& ) \n\nReturns a new result that is Succeeded if and only if both this\nand the given Result are Succeeded.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-result.html#( ||| )","title":"Result.( ||| )","content":"Result.( ||| ) \n( ||| ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-result.html#Outcome","title":"Result.Outcome","content":"Result.Outcome \nOutcome \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-result.html#Stamp","title":"Result.Stamp","content":"Result.Stamp \nStamp \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-result.html#Labels","title":"Result.Labels","content":"Result.Labels \nLabels \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-result.html#Arguments","title":"Result.Arguments","content":"Result.Arguments \nArguments \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-rose-1.html","title":"Rose<'a>","content":"Rose<'a> \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-stringnonulls.html","title":"StringNoNulls","content":"StringNoNulls \n\nRepresents a string that does not contain null characters ('\\000')\n \nStringNoNulls.Get \nGet \nStringNoNulls.StringNoNulls \nStringNoNulls"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-stringnonulls.html#Get","title":"StringNoNulls.Get","content":"StringNoNulls.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-stringnonulls.html#StringNoNulls","title":"StringNoNulls.StringNoNulls","content":"StringNoNulls.StringNoNulls \nStringNoNulls \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-testdata.html","title":"TestData","content":"TestData \n \nTestData.NumberOfTests \nNumberOfTests \nTestData.NumberOfShrinks \nNumberOfShrinks \nTestData.Stamps \nStamps \nTestData.Labels \nLabels"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-testdata.html#NumberOfTests","title":"TestData.NumberOfTests","content":"TestData.NumberOfTests \nNumberOfTests \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-testdata.html#NumberOfShrinks","title":"TestData.NumberOfShrinks","content":"TestData.NumberOfShrinks \nNumberOfShrinks \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-testdata.html#Stamps","title":"TestData.Stamps","content":"TestData.Stamps \nStamps \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-testdata.html#Labels","title":"TestData.Labels","content":"TestData.Labels \nLabels \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-testresult.html","title":"TestResult","content":"TestResult \n \nTestResult.True \nTrue \nTestResult.False \nFalse \nTestResult.Exhausted \nExhausted"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-testresult.html#True","title":"TestResult.True","content":"TestResult.True \nTrue \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-testresult.html#False","title":"TestResult.False","content":"TestResult.False \nFalse \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-testresult.html#Exhausted","title":"TestResult.Exhausted","content":"TestResult.Exhausted \nExhausted \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-throwingfunction-2.html","title":"ThrowingFunction<'a, 'b>","content":"ThrowingFunction<'a, 'b> \n \nThrowingFunction<'a, 'b>.Get \nGet \nThrowingFunction<'a, 'b>.ThrowingFunction \nThrowingFunction"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-throwingfunction-2.html#Get","title":"ThrowingFunction<'a, 'b>.Get","content":"ThrowingFunction<'a, 'b>.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-throwingfunction-2.html#ThrowingFunction","title":"ThrowingFunction<'a, 'b>.ThrowingFunction","content":"ThrowingFunction<'a, 'b>.ThrowingFunction \nThrowingFunction \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-weightandvalue-1.html","title":"WeightAndValue<'a>","content":"WeightAndValue<'a> \n\n2-tuple containing a weight and a value, used in some Gen methods to indicate\nthe probability of a value.\n \nWeightAndValue<'a>.Weight \nWeight \nWeightAndValue<'a>.Value \nValue"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-weightandvalue-1.html#Weight","title":"WeightAndValue<'a>.Weight","content":"WeightAndValue<'a>.Weight \nWeight \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-weightandvalue-1.html#Value","title":"WeightAndValue<'a>.Value","content":"WeightAndValue<'a>.Value \nValue \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-xmlencodedstring.html","title":"XmlEncodedString","content":"XmlEncodedString \n\nRepresents a string that can be serializable as a XML value.\n \nXmlEncodedString.Get \nGet \nXmlEncodedString.XmlEncodedString \nXmlEncodedString"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-xmlencodedstring.html#Get","title":"XmlEncodedString.Get","content":"XmlEncodedString.Get \nGet \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-xmlencodedstring.html#XmlEncodedString","title":"XmlEncodedString.XmlEncodedString","content":"XmlEncodedString.XmlEncodedString \nXmlEncodedString \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html","title":"StateMachine","content":"StateMachine \n \nStateMachine.setup \nsetup \nStateMachine.setupFunc \nsetupFunc \nStateMachine.tearDown \ntearDown \nStateMachine.tearDownAction \ntearDownAction \nStateMachine.operationWithPrecondition \noperationWithPrecondition \nStateMachine.operation \noperation \nStateMachine.operationProp \noperationProp \nStateMachine.operationBool \noperationBool \nStateMachine.operationAction \noperationAction \nStateMachine.generate \ngenerate \nStateMachine.shrink \nshrink \nStateMachine.forOne \nforOne \nStateMachine.forAll \nforAll \nStateMachine.toProperty \ntoProperty"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#setup","title":"StateMachine.setup","content":"StateMachine.setup \nsetup \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#setupFunc","title":"StateMachine.setupFunc","content":"StateMachine.setupFunc \nsetupFunc \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#tearDown","title":"StateMachine.tearDown","content":"StateMachine.tearDown \ntearDown \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#tearDownAction","title":"StateMachine.tearDownAction","content":"StateMachine.tearDownAction \ntearDownAction \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#operationWithPrecondition","title":"StateMachine.operationWithPrecondition","content":"StateMachine.operationWithPrecondition \noperationWithPrecondition \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#operation","title":"StateMachine.operation","content":"StateMachine.operation \noperation \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#operationProp","title":"StateMachine.operationProp","content":"StateMachine.operationProp \noperationProp \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#operationBool","title":"StateMachine.operationBool","content":"StateMachine.operationBool \noperationBool \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#operationAction","title":"StateMachine.operationAction","content":"StateMachine.operationAction \noperationAction \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#generate","title":"StateMachine.generate","content":"StateMachine.generate \ngenerate \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#shrink","title":"StateMachine.shrink","content":"StateMachine.shrink \nshrink \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#forOne","title":"StateMachine.forOne","content":"StateMachine.forOne \nforOne \n\n Check one run, i.e. create a property from a single run.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#forAll","title":"StateMachine.forAll","content":"StateMachine.forAll \nforAll \n\nCheck all generated runs, i.e. create a property from an arbitrarily generated run.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachine.html#toProperty","title":"StateMachine.toProperty","content":"StateMachine.toProperty \ntoProperty \n\nTurn a machine specification into a property.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-disposecall-1.html","title":"DisposeCall<'Actual>","content":"DisposeCall<'Actual> \n \nDisposeCall<'Actual>.( .ctor ) \n( .ctor )"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-disposecall-1.html#( .ctor )","title":"DisposeCall<'Actual>.( .ctor )","content":"DisposeCall<'Actual>.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-ioperation.html","title":"IOperation","content":"IOperation \n \nIOperation.ClearDependencies \nClearDependencies \nIOperation.Gets \nGets \nIOperation.Sets \nSets \nIOperation.Provides \nProvides \nIOperation.Needs \nNeeds"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-ioperation.html#ClearDependencies","title":"IOperation.ClearDependencies","content":"IOperation.ClearDependencies \nClearDependencies \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-ioperation.html#Gets","title":"IOperation.Gets","content":"IOperation.Gets \nGets \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-ioperation.html#Sets","title":"IOperation.Sets","content":"IOperation.Sets \nSets \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-ioperation.html#Provides","title":"IOperation.Provides","content":"IOperation.Provides \nProvides \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-ioperation.html#Needs","title":"IOperation.Needs","content":"IOperation.Needs \nNeeds \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-ioperationresult.html","title":"IOperationResult","content":"IOperationResult \n \nIOperationResult.Reset \nReset"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-ioperationresult.html#Reset","title":"IOperationResult.Reset","content":"IOperationResult.Reset \nReset \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machine-2.html","title":"Machine<'Actual, 'Model>","content":"Machine<'Actual, 'Model> \n\nDefines the initial state for actual and model object, and allows to define the generator to use\nfor the next state, based on the model.\n \nMachine<'Actual, 'Model>.( .ctor ) \n( .ctor ) \nMachine<'Actual, 'Model>.( .ctor ) \n( .ctor ) \nMachine<'Actual, 'Model>.Next \nNext \nMachine<'Actual, 'Model>.ShrinkOperations \nShrinkOperations \nMachine<'Actual, 'Model>.TearDown \nTearDown \nMachine<'Actual, 'Model>.Setup \nSetup \nMachine<'Actual, 'Model>.MaxNumberOfCommands \nMaxNumberOfCommands"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machine-2.html#( .ctor )","title":"Machine<'Actual, 'Model>.( .ctor )","content":"Machine<'Actual, 'Model>.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machine-2.html#( .ctor )","title":"Machine<'Actual, 'Model>.( .ctor )","content":"Machine<'Actual, 'Model>.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machine-2.html#Next","title":"Machine<'Actual, 'Model>.Next","content":"Machine<'Actual, 'Model>.Next \nNext \n\nGenerate a number of possible commands based on the current state of the model. \nPreconditions are still checked, so even if a Command is returned, it is not chosen\nif its precondition does not hold.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machine-2.html#ShrinkOperations","title":"Machine<'Actual, 'Model>.ShrinkOperations","content":"Machine<'Actual, 'Model>.ShrinkOperations \nShrinkOperations \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machine-2.html#TearDown","title":"Machine<'Actual, 'Model>.TearDown","content":"Machine<'Actual, 'Model>.TearDown \nTearDown \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machine-2.html#Setup","title":"Machine<'Actual, 'Model>.Setup","content":"Machine<'Actual, 'Model>.Setup \nSetup \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machine-2.html#MaxNumberOfCommands","title":"Machine<'Actual, 'Model>.MaxNumberOfCommands","content":"Machine<'Actual, 'Model>.MaxNumberOfCommands \nMaxNumberOfCommands \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machinerun-2.html","title":"MachineRun<'Actual, 'Model>","content":"MachineRun<'Actual, 'Model> \n \nMachineRun<'Actual, 'Model>.StructuredToString \nStructuredToString \nMachineRun<'Actual, 'Model>.Setup \nSetup \nMachineRun<'Actual, 'Model>.Operations \nOperations \nMachineRun<'Actual, 'Model>.TearDown \nTearDown \nMachineRun<'Actual, 'Model>.UsedSize \nUsedSize"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machinerun-2.html#StructuredToString","title":"MachineRun<'Actual, 'Model>.StructuredToString","content":"MachineRun<'Actual, 'Model>.StructuredToString \nStructuredToString \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machinerun-2.html#Setup","title":"MachineRun<'Actual, 'Model>.Setup","content":"MachineRun<'Actual, 'Model>.Setup \nSetup \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machinerun-2.html#Operations","title":"MachineRun<'Actual, 'Model>.Operations","content":"MachineRun<'Actual, 'Model>.Operations \nOperations \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machinerun-2.html#TearDown","title":"MachineRun<'Actual, 'Model>.TearDown","content":"MachineRun<'Actual, 'Model>.TearDown \nTearDown \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-machinerun-2.html#UsedSize","title":"MachineRun<'Actual, 'Model>.UsedSize","content":"MachineRun<'Actual, 'Model>.UsedSize \nUsedSize \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-methodcall-1.html","title":"MethodCall<'Actual>","content":"MethodCall<'Actual> \n \nMethodCall<'Actual>.( .ctor ) \n( .ctor )"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-methodcall-1.html#( .ctor )","title":"MethodCall<'Actual>.( .ctor )","content":"MethodCall<'Actual>.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-new-1.html","title":"New<'Actual>","content":"New<'Actual> \n \nNew<'Actual>.( .ctor ) \n( .ctor )"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-new-1.html#( .ctor )","title":"New<'Actual>.( .ctor )","content":"New<'Actual>.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-objectmachine-1.html","title":"ObjectMachine<'Actual>","content":"ObjectMachine<'Actual> \n \nObjectMachine<'Actual>.( .ctor ) \n( .ctor )"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-objectmachine-1.html#( .ctor )","title":"ObjectMachine<'Actual>.( .ctor )","content":"ObjectMachine<'Actual>.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-objectmachinemodel.html","title":"ObjectMachineModel","content":"ObjectMachineModel \n \nObjectMachineModel.Item1 \nItem1 \nObjectMachineModel.Item2 \nItem2 \nObjectMachineModel.Item3 \nItem3"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-objectmachinemodel.html#Item1","title":"ObjectMachineModel.Item1","content":"ObjectMachineModel.Item1 \nItem1 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-objectmachinemodel.html#Item2","title":"ObjectMachineModel.Item2","content":"ObjectMachineModel.Item2 \nItem2 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-objectmachinemodel.html#Item3","title":"ObjectMachineModel.Item3","content":"ObjectMachineModel.Item3 \nItem3 \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-operation-2.html","title":"Operation<'Actual, 'Model>","content":"Operation<'Actual, 'Model> \n\nAn operation describes pre and post conditions and the model for a single operation under test.\nThe post-conditions are the invariants that will be checked; when these do not hold the test fails.\n \nOperation<'Actual, 'Model>.( .ctor ) \n( .ctor ) \nOperation<'Actual, 'Model>.Check \nCheck \nOperation<'Actual, 'Model>.Pre \nPre \nOperation<'Actual, 'Model>.Run \nRun"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-operation-2.html#( .ctor )","title":"Operation<'Actual, 'Model>.( .ctor )","content":"Operation<'Actual, 'Model>.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-operation-2.html#Check","title":"Operation<'Actual, 'Model>.Check","content":"Operation<'Actual, 'Model>.Check \nCheck \n\nExcecutes the command on the object under test, and returns a property that must hold.\nThis property typically compares the state of the model with the state of the object after\nexecution of the command.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-operation-2.html#Pre","title":"Operation<'Actual, 'Model>.Pre","content":"Operation<'Actual, 'Model>.Pre \nPre \n\nOptional precondition for execution of the command. When this does not hold, the test continues\nbut the command is not executed.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-operation-2.html#Run","title":"Operation<'Actual, 'Model>.Run","content":"Operation<'Actual, 'Model>.Run \nRun \n\nExecutes the command on the model of the object.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-operationresult-1.html","title":"OperationResult<'a>","content":"OperationResult<'a> \n \nOperationResult<'a>.( .ctor ) \n( .ctor ) \nOperationResult<'a>.V \nV \nOperationResult<'a>.Counter \nCounter"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-operationresult-1.html#( .ctor )","title":"OperationResult<'a>.( .ctor )","content":"OperationResult<'a>.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-operationresult-1.html#V","title":"OperationResult<'a>.V","content":"OperationResult<'a>.V \nV \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-operationresult-1.html#Counter","title":"OperationResult<'a>.Counter","content":"OperationResult<'a>.Counter \nCounter \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-setup-2.html","title":"Setup<'Actual, 'Model>","content":"Setup<'Actual, 'Model> \n \nSetup<'Actual, 'Model>.( .ctor ) \n( .ctor ) \nSetup<'Actual, 'Model>.Actual \nActual \nSetup<'Actual, 'Model>.Model \nModel"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-setup-2.html#( .ctor )","title":"Setup<'Actual, 'Model>.( .ctor )","content":"Setup<'Actual, 'Model>.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-setup-2.html#Actual","title":"Setup<'Actual, 'Model>.Actual","content":"Setup<'Actual, 'Model>.Actual \nActual \n\nRandomly generate the initial state of the actual object. Should still correspond to the \ninitial state of model object; so you should only randomly generate parameters to the instance\nthat don't affect the model.\nNote:make sure that each value is truly a new instance if the commands change the state\nof the object. Gen.connstant in particular is a bad idea - use Gen.fresh instead.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-setup-2.html#Model","title":"Setup<'Actual, 'Model>.Model","content":"Setup<'Actual, 'Model>.Model \nModel \n\nInitial state of model object. Must correspond to initial state of actual object.\n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachineextensions.html","title":"StateMachineExtensions","content":"StateMachineExtensions \n \nStateMachineExtensions.ToProperty \nToProperty \nStateMachineExtensions.ToProperty \nToProperty \nStateMachineExtensions.ToProperty \nToProperty"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachineextensions.html#ToProperty","title":"StateMachineExtensions.ToProperty","content":"StateMachineExtensions.ToProperty \nToProperty \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachineextensions.html#ToProperty","title":"StateMachineExtensions.ToProperty","content":"StateMachineExtensions.ToProperty \nToProperty \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-statemachineextensions.html#ToProperty","title":"StateMachineExtensions.ToProperty","content":"StateMachineExtensions.ToProperty \nToProperty \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-stopoperation-2.html","title":"StopOperation<'Actual, 'Model>","content":"StopOperation<'Actual, 'Model> \n \nStopOperation<'Actual, 'Model>.( .ctor ) \n( .ctor )"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-stopoperation-2.html#( .ctor )","title":"StopOperation<'Actual, 'Model>.( .ctor )","content":"StopOperation<'Actual, 'Model>.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-teardown-1.html","title":"TearDown<'Actual>","content":"TearDown<'Actual> \n \nTearDown<'Actual>.( .ctor ) \n( .ctor ) \nTearDown<'Actual>.Actual \nActual"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-teardown-1.html#( .ctor )","title":"TearDown<'Actual>.( .ctor )","content":"TearDown<'Actual>.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fscheck.github.io/FsCheck/reference/fscheck-experimental-teardown-1.html#Actual","title":"TearDown<'Actual>.Actual","content":"TearDown<'Actual>.Actual \nActual \n"},{"uri":"https://fscheck.github.io/FsCheck/index.html","title":"FsCheck: Random Testing for .NET\r\n","content":"(**\nFsCheck: Random Testing for .NET\n================================\n\nFsCheck is a tool for testing .NET programs automatically. The programmer provides a specification of the program, in the form of properties which functions, methods or objects should satisfy, and FsCheck then tests that the properties hold in a large number of randomly generated cases. While writing the properties, you are actually writing a testable specification of your program. Specifications are expressed in F#, C# or VB, using combinators defined in the FsCheck library. FsCheck provides combinators to define properties, observe the distribution of test data, and define test data generators. When a property fails, FsCheck automatically displays a minimal counter example.\n\nFsCheck, NUnit and xUnit.NET plugin can be <a href=\"https://www.nuget.org/packages?q=fscheck\">installed from NuGet</a> using your favorite package manager.\n\nUsers have also created integrations with [Expecto](https://github.com/haf/Expecto), \n[Fuchu](https://github.com/mausch/Fuchu) and \n[AutoFixture](https://github.com/AutoFixture/AutoFixture) that \nyou can [find on NuGet](https://www.nuget.org/packages?q=fscheck).\n\nDocumentation\n-------------\n\n * [QuickStart](QuickStart.html) to get started.\n\n * [Properties](Properties.html) describes FsCheck's language to express tests - \n   in other frameworks these are often called parametrized tests or\n   generative tests. FsCheck calls them properties.\n\n * [Generating test data](TestData.html) describes how to guide FsCheck to\n   generate better data or to stop it from generating data that doesn't make\n   sense for what you're trying to test. FsCheck has a flexible language to describe test \n   value generators and shrinkers, and apply them to your properties.\n\n * [Model based testing](StatefulTesting.html) is a particular testing approach\n   where FsCheck generates a large number of random operations on an object or data\n   structure, and the results of each operation are compared with a (much simpler)\n   model.\n\n * [Running Tests](RunningTests.html) explains various ways to run FsCheck tests and how to\n   integrate with unit testing frameworks.\n\n * [Tips and tricks](TipsAndTricks.html) \n\n * [API Reference](reference/index.html) contains automatically generated documentation for all types, modules\n   and functions.\n\n * [Model based testing vNext (Experimental)](StatefulTestingNew.html) is a relatively new addition for\n   a more powerful model based testing. It's still a bit rough around the edges, some things may not\n   work, and it is subject to change (i.e. no promises regarding semantic versioning and breaking changes). Regardless,\n   feedback is very much appreciated!\n \nContributing and copyright\n--------------------------\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork \nthe project and submit pull requests. If you're adding new public API, please also \nconsider adding [samples][content] that can be turned into documentation.\n\nThe library is available under the BSD license, which allows modification and \nredistribution for both commercial and non-commercial purposes. For more information see the \n[License file][license] in the GitHub repository. \n\n  [content]: https://github.com/fscheck/FsCheck/tree/master/docs\n  [gh]: https://github.com/fscheck/FsCheck\n  [issues]: https://github.com/fscheck/FsCheck/issues\n  [readme]: https://github.com/fscheck/FsCheck/blob/master/README.md\n  [license]: https://github.com/fscheck/FsCheck/blob/master/License.txt\n*)"},{"uri":"https://fscheck.github.io/FsCheck/LearningResources.html","title":"Learning resources\r\n","content":"# Learning resources\r\n\r\n## Articles\r\n\r\n* \"QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs\" by Koen Claessen and John Hughes [pdf](http://www.eecs.northwestern.edu/~robby/courses/395-495-2009-fall/quick.pdf)\r\n* \"An introduction to property-based testing\" by Scott Wlaschin [link](http://fsharpforfunandprofit.com/posts/property-based-testing/)\r\n* \"Choosing properties for property-based testing\" by Scott Wlaschin [link](http://fsharpforfunandprofit.com/posts/property-based-testing-2/)\r\n* An interesting read about QuickCheck is in [Chapter 11](http://book.realworldhaskell.org/read/testing-and-quality-assurance.html) of the excellent [Real world Haskell](http://book.realworldhaskell.org) book. The book is freely available online, but do the authors a favor and buy it, it's really worth it also for F# programmers.\r\n* [This section](http://opcoast.com/demos/fsharp/part3.html) of the [Learning F#: Case study with Branch and Bound](http://opcoast.com/demos/fsharp/index.html) article demonstrates uses of FsCheck to test functions that arise in development of a branch and bound algorithm.\r\n\r\n## Videos\r\n\r\n* \"The lazy programmer's guide to writing 1000's of tests: An introduction to property based testing\" by Scott Wlaschin [video](https://www.youtube.com/watch?v=IYzDFHx6QPY)\r\n* \"Race Conditions, Distribution, Interactions - Testing the Hard Stuff and Staying Sane\" by John Hughes [video](https://vimeo.com/68383317)\r\n* \"Property-Based Testing for Better Code\" by Jessica Kerr [video]https://www.youtube.com/watch?v=shngiiBfD80)\r\n\r\n## Blogs\r\n\r\n* Kurt's [Blog](http://fortysix-and-two.blogspot.com) for announcements, change logs and other posts more or less related to FsCheck. Now largely dormant.\r\n"},{"uri":"https://fscheck.github.io/FsCheck/Properties.html","title":"Properties\r\n","content":"(*** hide ***)\n#I \"../src/FsCheck/bin/Release/netstandard2.0\"\n#r \"FsCheck\"\n\nopen FsCheck\nopen System\n\n(**\n# Properties\n\nProperties are expressed as F# function definitions or C# lambdas or methods. \nProperties are universally quantified over their parameters, so *)\n\nlet revRevIsOrig (xs:list<int>) = List.rev(List.rev xs) = xs\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/Properties.cs,key=revRevIsOrig]\n\nmeans that the equality holds for all lists xs.\n\nProperties must not have generic types - because there can be so many different\nkinds of constraints on generic types, some of which may not even be visible from the\ntype signature, we currently think allowing FsCheck to generate a generic type is not worth the added complexity. \nIt's very simple to fix any types anyway simply by adding some type annotations.\n\nFsCheck can check properties of various forms - these forms are called testable, \nand are indicated in the API by a generic type called `'Testable`. A `'Testable` may \nbe a function of any number of parameters that returns bool or unit. In the latter case, \n a test passes if it does not throw. The entry point to create properties is the Prop module.\n\n Like all of FsCheck's API, there are C# counterparts for all of the F# methods described.\n    \n## Conditional Properties\n\nProperties may take the form `<condition> ==> <property>`\n\nFor example,*)\n\n(***hide***)\nlet rec ordered xs = \n  match xs with\n  | [] -> true\n  | [x] -> true\n  | x::y::ys ->  (x <= y) && ordered (y::ys)\nlet rec insert x xs = \n  match xs with\n  | [] -> [x]\n  | c::cs -> if x <= c then x::xs else c::(insert x cs)\n\n(***define-output:insertKeepsOrder***)\nlet insertKeepsOrder (x:int) xs = ordered xs ==> ordered (insert x xs)\nCheck.Quick insertKeepsOrder\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/Properties.cs,key=insertKeepsOrder]    *)\n\n(***include-output:insertKeepsOrder***)\n\n(**\nSuch a property holds if the property after `==>` holds whenever the condition does.\n\nTesting discards test cases which do not satisfy the condition. Test case generation \ncontinues until 100 cases which do satisfy the condition have been found, or until \nan overall limit on the number of test cases is reached (to avoid looping if the condition \nnever holds). In this case a message such as \"Arguments exhausted after 97 tests.\"\nindicates that 97 test cases satisfying the condition were found, and that the property held in those 97 cases.\n\nNotice that in this case the generated values had to be restricted to int. This is because the generated \nvalues need to be comparable, but this is not reflected in the types. Therefore, without the explicit \nrestriction, FsCheck could generate lists containing different types (subtypes of objects), and these are not mutually comparable.\n    \n## Lazy Properties\n\nSince F# has eager evaluation by default, the above property does more work than necessary: \nit evaluates the property at the right of the condition no matter what the \noutcome of the condition on the left. While only a performance consideration in the above \nexample, this may limit the expressiveness of properties - consider:*)\n\n(***define-output: eager***)\nlet tooEager a = a <> 0 ==> (1/a = 1/a)\nCheck.Quick tooEager\n\n(***include-output: eager***)\n\n(**\nNon-strict evaluation is needed here to make sure the propery is checked correctly:*)\n\n(***define-output: lazy***)\nlet moreLazy a = a <> 0 ==> (lazy (1/a = 1/a))\nCheck.Quick moreLazy\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/Properties.cs,key=lazy] *)\n\n(***include-output: lazy***)\n\n(**\n## Quantified Properties\n\nProperties may take the form `forAll <arbitrary>  (fun <args> -> <property>)`.\n\nFor example, *)\n\n(***define-output:insertWithArb***)\nlet orderedList = Arb.from<list<int>> |> Arb.mapFilter List.sort ordered\nlet insertWithArb x = Prop.forAll orderedList (fun xs -> ordered(insert x xs))\nCheck.Quick insertWithArb\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/Properties.cs,key=insertWithArb] *)\n\n(***include-output:insertWithArb***)\n\n(**\nThe first argument of forAll is an IArbitrary instance. Such an instance \nencapsulates a test data generator and a shrinker (more on that in [Test Data](TestData.html)).\nBy supplying a custom generator, instead of using the default generator \nfor that type, it is possible to control the distribution of test data. In \nthe example, by supplying a custom generator for ordered lists, rather than \nfiltering out test cases which are not ordered, we guarantee that 100 test \ncases can be generated without reaching the overall limit on test cases. \nCombinators for defining generators are described in [Test Data](TestData.html).\n    \n## Expecting exceptions\n\nYou may want to test that a function or method throws an exception under certain circumstances. \nUse `throws<'e :> exn,'a> Lazy<'a>` to achieve this. For example:*)\n\n(***define-output: expectDivideByZero***)\nlet expectDivideByZero() = Prop.throws<DivideByZeroException,_> (lazy (raise <| DivideByZeroException()))\nCheck.Quick expectDivideByZero\n\n(***include-output: expectDivideByZero***)\n  \n(**\nThis functionality is not available in the C# API.\n\n## Timed Properties\n\nProperties may take the form `within <timeout in ms> <Lazy<property>>`\n\nFor example,*)\n\n(***hide***)\n//TODO: figure out why this does not exit cleanly. If I eval, \n//FSharp.Formatting formats this file nicely, but hangs on any\n//subsequent file. I suspect this has to do with some thread\n//not closing cleanly...\n//(***define-output:timesOut***)\n\n(***do-not-eval***)\nlet timesOut (a:int) = \n    lazy\n        if a>10 then\n            do System.Threading.Thread.Sleep(3000)\n            true\n        else \n            true\n    |> Prop.within 1000\nCheck.Quick timesOut\n\n(***hide***)\n//(***include-output:timesOut***)\n\n(**\nThe first argument is the time the lazy property may run. If it runs longer, \nFsCheck considers the test as failed. Otherwise, the outcome of the lazy property is \nthe outcome of within. Note that, although within attempts to cancel the thread in which \nthe property is executed, that may not succeed, and so the thread may actually continue to run until the process ends.\n\nThis functionality is not available in the C# API.\n    \n## Observing Test Case Distribution\n\nIt is important to be aware of the distribution of test cases: if test data is not well \ndistributed then conclusions drawn from the test results may be invalid. In particular, \nthe `==>` operator can skew the distribution of test data badly, since only test data which \nsatisfies the given condition is used.\n\nFsCheck provides several ways to observe the distribution of test data. Code for \nmaking observations is incorporated into the statement of properties, each time \nthe property is actually tested the observation is made, and the collected observations \nare then summarized when testing is complete.\n\n### Counting Trivial Cases\n\nA property may take the form `trivial <condition> <property>`\n\nFor example,*)\n\n(***define-output:insertTrivial***)\nlet insertTrivial (x:int) xs = \n  ordered xs ==> (ordered (insert x xs))\n  |> Prop.trivial (List.length xs = 0)\nCheck.Quick insertTrivial\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/Properties.cs,key=insertTrivial]\n\nTest cases for which the condition is true are classified as trivial, and the proportion of \ntrivial test cases in the total is reported:*)\n\n(***include-output:insertTrivial***)\n\n(**\n### Classifying Test Cases\n\nA property may take the form `classify <condition> <string> <property>`\n\nFor example,*)\n\n(***define-output:insertClassify***)\nlet insertClassify (x:int) xs = \n  ordered xs ==> (ordered (insert x xs))\n  |> Prop.classify (ordered (x::xs)) \"at-head\"\n  |> Prop.classify (ordered (xs @ [x])) \"at-tail\"\nCheck.Quick insertClassify\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/Properties.cs,key=insertClassify]\n\nTest cases satisfying the condition are assigned the classification given, and the distribution of \nclassifications is reported after testing:*)\n\n(***include-output:insertClassify***)\n\n(**\nNote that a test case may fall into more than one classification.\n\n### Collecting Data Values\n\nA property may take the form `collect <expression> <property>`\n\nFor example,*)\n\n(***define-output: insertCollect***)\nlet insertCollect (x:int) xs = \n  ordered xs ==> (ordered (insert x xs))\n      |> Prop.collect (List.length xs)\nCheck.Quick insertCollect\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/Properties.cs,key=insertCollect]\n\nThe argument of collect is evaluated in each test case, and the distribution of \nvalues is reported. The type of this argument is printed using `sprintf \"%A\"`:*)\n\n(***include-output: insertCollect***)\n\n(**  \n### Combining Observations\n\nThe observations described here may be combined in any way. All the observations \nof each test case are combined, and the distribution of these combinations is \nreported. For example:*)\n\n(***define-output:insertCombined***)\nlet insertCombined (x:int) xs = \n    ordered xs ==> (ordered (insert x xs))\n    |> Prop.classify (ordered (x::xs)) \"at-head\"\n    |> Prop.classify (ordered (xs @ [x])) \"at-tail\"\n    |> Prop.collect (List.length xs)\nCheck.Quick insertCombined\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/Properties.cs,key=insertCombined]*)\n\n(***include-output:insertCombined***)\n\n(**\n## And, Or and Labels\n\nProperties may take the form\n\n* `<property> .&. <property>` succeeds if both succeed, fails if one of the properties fails, and is rejected when both are rejected.\n* `<property> .|. <property>`succeeds if either property succeeds, fails if both properties fail, and is rejected when both are rejected.\n\nThe `.&.` combinator is most commonly used to write complex properties which share a generator. \nIn that case, it might be difficult upon failure to know excactly which sub-property has caused the failure. \nThat's why you can label sub-properties, and FsCheck shows the labels of the failed subproperties when \nit finds a counter-example. This takes the form: `<string> @| <property>` or `<property> |@ <string>`.\n\nFor example,*)\n\n(***define-output:complex***)\nlet complex (m: int) (n: int) =\n  let res = n + m\n  (res >= m)    |@ \"result > #1\" .&.\n  (res >= n)    |@ \"result > #2\" .&. \n  (res < m + n) |@ \"result not sum\"\nCheck.Quick complex\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/Properties.cs,key=complexProperty]*)\n\n(***include-output:complex***)\n\n(**\nIt's perfectly fine to apply more than one label to a property; FsCheck displays all the applicable labels. \nThis is useful for displaying intermediate results, for example:*)\n\n(***define-output:multiply***)\nlet multiply (n: int, m: int) =\n    let res = n*m\n    sprintf \"evidence = %i\" res @| (\n      \"div1\" @| (m <> 0 ==> lazy (res / m = n)) .&. \n      \"div2\" @| (n <> 0 ==> lazy (res / n = m)) .&. \n      \"lt1\"  @| (res > m) .&. \n      \"lt2\"  @| (res > n))\nCheck.Quick multiply\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/Properties.cs,key=multipleLabels]*)\n\n(***include-output:multiply***)\n\n(**\nNotice that the above property combines subproperties by tupling them. This works for tuples up to length 6 and lists:\n\n*    `(<property1>,<property2>,...,<property6>)` means `<property1> .&. <property2> .&.... .&.<property6>`\n*    `[property1;property2,...,propertyN]` means `<property1> .&. <property2> .&.... .&.<propertyN>`\n\nThe example written as a list:*)\n\nlet multiplyAsList (n: int, m: int) =\n    let res = n*m\n    sprintf \"evidence = %i\" res @| [\n      \"div1\" @| (m <> 0 ==> lazy (res / m = n));\n      \"div2\" @| (n <> 0 ==> lazy (res / n = m));\n      \"lt1\"  @| (res > m);\n      \"lt2\"  @| (res > n)]\n(**\nProduces the same result.*)"},{"uri":"https://fscheck.github.io/FsCheck/QuickStart.html","title":"Quick Start\r\n","content":"(*** hide ***)\n#I @\"../src/FsCheck/bin/Release/netstandard2.0\"\n#r @\"../src/FsCheck.Xunit/bin/Release/netstandard2.0/FsCheck.Xunit.dll\"\n#r @\"../packages/xunit.abstractions/lib/netstandard1.0/xunit.abstractions.dll\"\n#r @\"../packages/xunit.extensibility.core/lib/netstandard1.1/xunit.core.dll\"\n#r \"FsCheck\"\n\n(**\n# Quick Start\n\nThe fastest way to understand how FsCheck works is by writing some *properties* - FsCheck's terminology for a parametrized\ntest, or a generative test - and run them using the built-in test runner. Later on, we'll describe how they can be integrated\nwith existing test frameworks like NUnit, xUnit.NET or MsTest.\n\nFirst install FsCheck, open an fsx file and start with:*)\n\n#r \"FsCheck\"\n\nopen FsCheck\n\n(** In C#: To easily experiment, start a new console app to execute the snippets below (the output is written to console\nby default). Alternatively, in LinqPad, reference FsCheck.dll and FSharp.Core.dll, open namespace FsCheck, change the language to \"C# statements\"\nand you should be able to execute most of the snippets as well. \n\n## A Simple Example\n\nA simple example of a property - a test with parameters - is written as a normal F# function that returns a bool: *)\n\nlet revRevIsOrig (xs:list<int>) = List.rev(List.rev xs) = xs\n(** This property asserts that the reverse of the reverse of a list is the list itself. \nTo check the property, we load this definition in F# interactive and then invoke *)\n\n(*** define-output: revRevIsOrig ***)\nCheck.Quick revRevIsOrig\n\n(*** include-output: revRevIsOrig ***)\n\n(** In C#:\n\n    [lang=csharp,file=../examples/CSharp.DocSnippets/QuickStart.cs,key=revRevIsOrig]\n\nWhen a property fails, FsCheck displays a counter-example. For example, if we define *)\n\n(*** define-output: revIsOrig ***)\nlet revIsOrig (xs:list<int>) = List.rev xs = xs\nCheck.Quick revIsOrig\n\n(*** include-output: revIsOrig ***)\n\n(** In C#: \n\n    [lang=csharp,file=../examples/CSharp.DocSnippets/QuickStart.cs,key=revIsOrig]\n\nFsCheck also *shrinks* the counter example: it tries to find the minimal counter example that \nstill fails the property. The counter example is indeed minimal: \nthe list must have at least two different elements for the test to fail. FsCheck displays how many times it \nfound a smaller (in some way) counter example and so proceeded to shrink further.\n\nTo learn more on how to write properties, see [Properties](Properties.html).\n\n## What do I do if a test loops or encounters an error?\n\nIn this case we know that the property does not hold, but Check.Quick does not display the counter-example. \nThere is another testing function provided for this situation. Repeat the test using \n<pre>Check.Verbose</pre> or in C# <pre>VerboseCheck()</pre>\nwhich displays each test case before running the test: the last test case displayed is thus\nthe one in which the loop or error arises.\n\nTo learn more on how to run FsCheck tests see [Running Tests](RunningTests.html).\n\n## FsCheck teaches us a lesson\n\nThe property above (the reverse of the reverse of a list is the list itself) is not always correct. \nConsider a list of floats that contains `NaN` (not a number). Since `NaN <> NaN`, the reverse of \nthe reverse of `[NaN]` is not actually equal to `[NaN]`. FsCheck has a knack for finding this kind of specification problem. \nTo see this error, ask FsCheck to generate lists of floats:*)\n\n(***define-output:revFloat***)\nlet revRevIsOrigFloat (xs:list<float>) = List.rev(List.rev xs) = xs\nCheck.Quick revRevIsOrigFloat\n\n(***include-output:revFloat***)\n\n(** That said, the example in C# using floats actually works!\n\n    [lang=csharp,file=../examples/CSharp.DocSnippets/QuickStart.cs,key=revRevIsOrigFloat]\n\nThis is because SequenceEquals uses the default equality comparer under the hood, which uses `Double`'s `Equals` method, which\nhas a special provision for `NaN`, as you can see in the [reference source](http://referencesource.microsoft.com/#mscorlib/system/double.cs,152).\nIf we pass an `EqualityComparer` that uses `==` to `SequenceEquals`, the C# example also fails.\n\nAs this seemingly trivial example shows, FsCheck helps you discover interesting properties of your code - and so ultimately,\nmore bugs!\n\n## Using FsCheck with other testing frameworks\n\nOnce you have finished your initial exploration of FsCheck, you'll probably want to use it with your existing\nunit test framework to augment unit tests or just to run the properties more easily. Below, we'll show some\nintegration, but we leave it up to you to choose whichever suits your environment best.\n\n### Integration with Expecto\n\nSome testing frameworks like Expecto have an out-of-the-box integration with FsCheck. By using one of the runners that\nsupport FsCheck out of the box, you gain access the the frameworks' reporting capabilities and integrations with IDEs\nand build tooling.\n\nHere's a sample:\n\n```fsharp\nopen Expecto\nopen Expecto.ExpectoFsCheck\n\nlet config = { FsCheck.Config.Default with MaxTest = 10000 }\n\nlet properties =\n  testList \"FsCheck samples\" [\n    testProperty \"Addition is commutative\" <| fun a b ->\n      a + b = b + a\n      \n    testProperty \"Reverse of reverse of a list is the original list\" <|\n      fun (xs:list<int>) -> List.rev (List.rev xs) = xs\n\n    // you can also override the FsCheck config\n    testPropertyWithConfig config \"Product is distributive over addition\" <|\n      fun a b c ->\n        a * (b + c) = a * b + a * c\n  ]\n\nTests.runTests defaultConfig properties\n```\n\n### Integration with xUnit\n\nAnother frequently used runner is xUnit.NET. Here is how to write \nthe unit test above so it can be run from xUnit.NET:*)\n\nopen global.Xunit\n\n[<Fact>]\nlet ``Reverse of reverse of a list is the original list``() =\n  let revRevIsOrig (xs:list<int>) = List.rev(List.rev xs) = xs\n  Check.QuickThrowOnFailure revRevIsOrig\n  \n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/QuickStart.cs,key=revRevIsOrigFact]\n\nFor xUnit, the test looks like any normal test, and the QuickThrowOnFailure ensures that if the test fails,\nan exception with the necessary information is raised so xUnit knows the test failed. The output of the test is the same\nas above.\n\n### Using FsCheck with xUnit.NET using the plugin\n\nxUnit.NET is \"blessed\" with an FsCheck plugin. To use it, install the FsCheck.Xunit NuGet package. The test above can now\nbe written more tersely as follows:*)\n\nopen FsCheck.Xunit\n\n[<Property>]\nlet ``Reverse of reverse of a list is the original list ``(xs:list<int>) =\n  List.rev(List.rev xs) = xs\n  \n(** xUnit now shows the test similarly to a regular test, and is able to run it directly.\n\nTo learn more on how to use this integration or integration with other frameworks like NUnit,\nsee [Running Tests](RunningTests.html). *)"},{"uri":"https://fscheck.github.io/FsCheck/RunningTests.html","title":"Running tests\r\n","content":"(*** hide ***)\n#I @\"../src/FsCheck/bin/Release/netstandard2.0\"\n#I @\"../src/FsCheck.Xunit/bin/Release/netstandard2.0\"\n#I @\"../src/FsCheck.NUnit/bin/Release/netstandard2.0\"\n#r @\"../packages/xunit.abstractions/lib/netstandard1.0/xunit.abstractions.dll\"\n#r @\"../packages/xunit.extensibility.core/lib/netstandard1.1/xunit.core.dll\"\n#r @\"../packages/NUnit/lib/netstandard2.0/nunit.framework.dll\"\n#r \"FsCheck\"\n#r \"FsCheck.Xunit\"\n#r \"FsCheck.NUnit\"\n\nopen FsCheck\nopen System\n\n(**\n# Running tests\n\nThis section describes the various ways in which you can run FsCheck tests:\n\n* FsCheck has a built-in test runner that is easy to invoke from F#/C# Interactive, commandline program or any test framework. \nIt writes the result of tests to standard output, and you can configure the FsCheck runner to throw an exception on test failure\nto signal the failure to whichever test runner you use.\n\n* FsCheck.Xunit integrates FsCheck with xUnit.NET to allow you to specify properties in a terse way. Tests written\nthis way look like native xUnit.NET tests, except they can take arguments.\n\n* FsCheck.NUnit integrates FsCheck with NUnit to allow you to specify properties in a terse way. Tests written\nthis way look like native NUnit tests, except they can take arguments.\n\n* FsCheck allows you to register an IRunner implementation that it calls on each outcome and each individual test it runs. This allows\na tighter integration with a specific test framework, and offers more control over printing of results.\n\n## Using the built-in test runner\n\n### Running a single property from an fsx/csx file or a command line runner\n\nFrom F# the preferred way of running a property is to use the methods on `Check`; for C# the preferred way is to use the extension\nmethods on the `Property` type.\n\n`Check.One` or `<property.Check>` runs the tests for a single property. It takes as argument an instance of the `Config` type\nor `Configuration` type respectively, which allows you to configure many aspects of how the FsCheck test runner works, \namong others the size of the test data and the random seed used (so you can reproduce a run). The `Config` type is an F# \nrecord type so is the preferred way to use from F#; for other languages `Configuration` is a mutable\nversion of it so is easier to use.\n\nMost of the methods on `Check` and the extension methods like `QuickCheck()` are a short-hand for running a test with a particular configuration. For example, `Check.Quick` \nis equivalent to `Check.One(Config.Quick, <property>)`; respectively `<property>.QuickCheck()` is a shorthand for `<property>.Check(Configuration.Quick)`.\n\nTake note of `Config(uration).Verbose` and `Check.Verbose`/`VerboseCheck`. These will print the arguments for each test, and are useful for example if\nyour test loops infinitely on some inputs.\n\nAlso take note of `Check.QuickThrowOnFailure`/`QuickCheckThrowOnFailure()` and `Check.VerboseThrowOnFailure`/`VerboseThrowOnFailure()`. \nThese are intended to be used from unit tests executed through an existing test runner. They'll call the FsCheck runner \nand configure it such that is throws on failure; in all frameworks we are aware of this signals that the test has failed \nand so is an easy way to integrate FsCheck tests with unit tests you may already have.\n\nHere is an example of how to run a test with a similar configuration to Quick, but that runs 1000 tests and does not print to\nthe output on success:*)\n\nCheck.One({ Config.Quick with MaxTest = 1000; QuietOnSuccess=true }, fun _ -> true)\n\n(**\n    [lang=csharp, file=../examples/CSharp.DocSnippets/RunningTests.cs,key=configuration]\n\n### Running many properties at once with Check.All\n\nUsually, you'll write more than one property to test. FsCheck allows you to group together properties as static members of a class: *)\ntype ListProperties =\n  static member ``reverse of reverse is original`` (xs:list<int>) = List.rev(List.rev xs) = xs\n  static member ``reverse is original`` (xs:list<int>) = List.rev xs = xs\n(**These can be checked at once using:*)\n\n(***define-output:ListProperties***)\nCheck.QuickAll<ListProperties>()\n\n(**FsCheck now also prints the name of each test:*)\n\n(***include-output:ListProperties***)\n\n(**Since all top level functions of a a module are also compiled as static member of a class with the name of the module, \nyou can also use Check.QuickAll to test all the top level functions in a certain module. \nHowever, the type of a module is not directly accessible via F#, so you can use the following trick:*)\n\n(***define-output:ListProperties2***)\nCheck.QuickAll typeof<ListProperties>.DeclaringType\n\n(**\nNotice also the counterpart of `Check.Verbose`: `Check.VerboseAll`.\n\n### Running tests using only modules\n\nArbitrary instances are given as static members of classes, and properties can be grouped together \nas static members of classes. Top level let functions are compiled as static member of their \nenclosing module (which is compiled as a class), and so you can simply define your properties and generators as \ntop level let-bound functions, and then register all generators and and all properties at once using the following trick:*)\n\n(***define-output:Marker***)\nlet myprop (i:int) = i >= 0\nlet mygen = Arb.Default.Int32() |> Arb.mapFilter (fun i -> Math.Abs i) (fun i -> i >= 0)\nlet helper = \"a string\"\nlet private helper' = true\n\ntype Marker = class end\nArb.registerByType (typeof<Marker>.DeclaringType)\nCheck.QuickAll (typeof<Marker>.DeclaringType)\n\n(***include-output:Marker***)\n\n(**\nThe Marker type is just any type defined in the module, to be able to get to the module's Type. F# offers no way \nto get to a module's Type directly.\n\nFsCheck determines the intent of the function based on its return type:\n\n* Properties: public functions that return unit, bool, Property or function of any arguments to those types \nor Lazy value of any of those types. So `myprop` is the only property that is run; `helper'` also returns bool but is private.\n* Arbitrary instances: return Arbitrary<_>\n\nAll other functions are respectfully ignored. If you have top level functions that return types that FsCheck will \ndo something with, but do not want them checked or registered, just make them private. FsCheck will ignore those functions.\n\n## Using FsCheck.Xunit\n\nTo use the integration install the FsCheck.Xunit nuget package. Then: *)\n\nopen FsCheck\nopen FsCheck.Xunit\n\n(**\nYou can now attribute tests with `PropertyAttribute` (a subclass of xUnit.NET's `FactAttribute`). Unlike xUnit.NET's facts, these \nmethods can take arguments and should return a property. FsCheck will be used to generate and shrink the arguments based on the\ntype and the currently registered generators. \n\nAn FsCheck test fails from xUnit.NET's perspective if it finds a counter-example, or if the arguments are exhausted. It\npasses when FsCheck can execute 100 tests (or whatever the configured number of tests is) succesfully.\n\nThe `PropertyAttribute` allows you to customize how FsCheck will run for that\nmethod, similar to how you would use the `Config` type otherwise. For example:*)\n\n[<Property>]\nlet ``abs(v) % k equals abs(v % k)`` v (NonZeroInt k) = \n    (abs v) % k = abs(v % k)\n\n(**\nLikely one of the most useful configuration options of `PropertyAttribute` is the ability to register or override an `Arbitrary`\ninstance just for that test method. You can also use the `PropertiesAttribute` (note the plural form) to set custom configuration options per class or per module basis. For example:*)\n\ntype Positive =\n    static member Double() =\n        Arb.Default.Float()\n        |> Arb.mapFilter abs (fun t -> t >= 0.0)\n\ntype Negative =\n    static member Double() =\n        Arb.Default.Float()\n        |> Arb.mapFilter (abs >> ((-) 0.0)) (fun t -> t <= 0.0)\n\n[<Properties( Arbitrary=[| typeof<Negative> |] )>]\nmodule ModuleWithProperties =\n\n    [<Property>]\n    let ``should use Arb instances from enclosing module``(underTest:float) =\n        underTest <= 0.0\n\n    [<Property( Arbitrary=[| typeof<Positive> |] )>]\n    let ``should use Arb instance on method``(underTest:float) =\n        underTest >= 0.0\n\n(**\nUsing `PropertiesAttribute` and `PropertyAttribute` you can set any configuration. For example in following module:\n\n* property 1 would use default config + overriden MaxTest = 10 and EndSize = 10 from `Properties` attribute\n* property 2 would use default config + overriden EndSize = 10 from `Properties` attribute and MaxTest = 500 from `Property` attribute\n* property 3 would use default config + overriden MaxTest = 10 and EndSize = 10 from `Properties` attribute and Replay = \"123,456\" from `Property` attribute \n*)\n\n[<Properties(MaxTest = 10, EndSize = 10)>] \nmodule Properties =\n\n    [<Property>]\n    let ``property 1`` input =\n        true\n\n    [<Property(MaxTest = 500)>]\n    let ``property 2`` input =\n        true\n\n    [<Property(Replay = \"123,456\")>]\n    let ``property 3`` input =\n        true\n\n(**\n### Using FsCheck.Xunit with TestDriven.Net\n\n[TestDriven.Net](http://testdriven.net) is a Visual Studio add-in that enables you to easily run a variety of tests\nwhile working with code in the IDE. Out of the box, TestDriven.Net can run tests written with FsCheck.Xunit.\n\nHowever, the user experience may, by default, be slightly less than optimal. TestDriven.Net outputs the state of the\ntest run in an unobtrusive manner, but if test failures occur, it outputs the result of the failing tests to Visual\nStudio's Output window. If you have Visual Studio configured in such a way that the Output window only appears if there\nactually *is* any output, you may be used to interpret the appearance of the Output window as a test failure.\n\nSince the Output window also appears if anything is written to the console in general, this can produce false\npositives. If you're accustomed to interpret the appearance of the Output window as a sign of a test failure, it can be\na little jarring that FsCheck by default always reports a bit of output on success.\n\nIf, for that, or other reasons, you want to disable output on success, you can do so:\n*)\n\n[<Property(QuietOnSuccess = true)>]\nlet ``abs(v) % k equals abs(v % k) `` v (NonZeroInt k) = \n    (abs v) % k = abs(v % k)\n\n(**\nSetting `QuietOnSuccess = true` only suppresses the output in case of success; in the case of test failures, output\nappears as normal.\n\n### Capturing output when using `FactAttribute`\n\nxUnit 2 doesn't capture messages written to the console but instead provides `ITestOutputHelper` to [capture output](https://xunit.github.io/docs/capturing-output.html).\n`ITestOutputHelper` has a single method `WriteLine` and xUnit will automatically pass it in as a constructor argument.\nFsCheck.Xunit provides overloads for `Property.QuickCheck`, `Property.QuickCheckThrowOnFailure`, `Property.VerboseCheck` and `Property.VerboseCheckThrowOnFailure`\nthat you can pass an `ITestOutputHelper` so that xUnit captures FsCheck messages:\n\n```\nusing System;\nusing FsCheck;\nusing FsCheck.Xunit;\nusing Xunit;\nusing Xunit.Abstractions;\n\npublic class Test\n{\n    private readonly ITestOutputHelper _TestOutputHelper;\n    public Test(ITestOutputHelper testOutputHelper)\n    {\n        _TestOutputHelper = testOutputHelper;\n    }\n\n    [Fact]\n    public void Test1()\n    {\n        Prop\n            .ForAll(...)\n            .VerboseCheckThrowOnFailure(_TestOutputHelper);\n    }\n}\n```\n*)\n\n(**\n## Using FsCheck.NUnit\n\nTo use the integration with NUnit 3 install the FsCheck.NUnit nuget package.\nMake sure your project(s) has target .NET `4.5` or greater.\nThen open FsCheck.NUnit.\n\nYou can now attribute tests with `PropertyAttribute` (a subclass of NUnit's `TestAttribute`). Unlike NUnit tests, these \nmethods can take arguments and should return a property. FsCheck will be used to generate and shrink the arguments based on the\ntype and the currently registered generators. \n\nAn FsCheck test fails from NUnit's perspective if it finds a counter-example, or if the arguments are exhausted. It\npasses when FsCheck can execute 100 tests (or whatever the configured number of tests is) succesfully.\n\nThe `PropertyAttribute` allows you to customize how FsCheck will run for that\nmethod, similar to how you would use the `Config` type otherwise.\n*)\n\nopen FsCheck.NUnit\n\n[<Property>]\nlet ``Reverse of reverse of a list is the original list ``(xs:list<int>) =\n  List.rev(List.rev xs) = xs\n\n(**\nNote: the NUnit integration doesn't have the ability, like FsCheck.Xunit, to override `Arbitrary` instances on a per class\nor per module basis. Otherwise, it is very similar.\n\n## Implementing IRunner \n\n### Example 1: to integrate FsCheck with other unit testing frameworks\n\nThe `Config` type that can be passed to the `Check.One` or `Check.All` methods takes an `IRunner` as argument. This i\nnterface has the following methods:\n\n* `OnStartFixture` is called when FsCheck is testing all the methods on a type, before starting any tests.\n* `OnArguments` is called after every test, passing the implementation the test number, the arguments and the every function. \n* `OnShrink` is called at every succesful shrink.\n* `OnFinished` is called with the name of the test and the outcome of the overall test run. This is used in the example below \nto call Assert statements from a particular unit testing framework - allowing FsCheck to integrate easily. You can leverage \nanother unit testing framework's ability to setup and tear down tests, have a nice graphical runner etc.*)\n\nlet testRunner =\n  { new IRunner with\n      member __.OnStartFixture t = ()\n      member __.OnArguments (ntest,args, every) = ()\n      member __.OnShrink(args, everyShrink) = ()\n      member __.OnFinished(name,testResult) = \n          match testResult with \n          | TestResult.True _ -> () //let the test runner know that the test passed\n          | _ -> () // test failed, or other problem. Notify test runner. Runner.onFinishedToString name testResult\n  }\n   \nlet withxUnitConfig = { Config.Default with Runner = testRunner }\n\n(**\n### Example 2: to customize printing of generated arguments\n\nBy default, FsCheck prints generated arguments using `sprintf \"%A\"`, or structured formatting. This usually does what you expect, \ni.e. for primitive types the value, for objects the ToString override and so on. If it does not (A motivating case is \ntesting with COM objects - overriding ToString is not an option and structured formatting does not do anything useful with it), \nyou can use the `label` combinator to solve this on a per property basis, but a more structured solution can be achieved by \nimplementing `IRunner`. For example:*)\n    \nlet formatterRunner formatter =\n  { new IRunner with\n      member x.OnStartFixture t =\n          printf \"%s\" (Runner.onStartFixtureToString t)\n      member x.OnArguments (ntest,args, every) =\n          printf \"%s\" (every ntest (args |> List.map formatter))\n      member x.OnShrink(args, everyShrink) =\n          printf \"%s\" (everyShrink (args |> List.map formatter))\n      member x.OnFinished(name,testResult) = \n          let testResult' = match testResult with \n                              | TestResult.False (testData,origArgs,shrunkArgs,outCome,seed) -> \n                                  TestResult.False (testData,origArgs |> List.map formatter, shrunkArgs |> List.map formatter,outCome,seed)\n                              | t -> t\n          printf \"%s\" (Runner.onFinishedToString name testResult') \n  }\n\n(**\n### Using FsCheck.NUnit with TestDriven.Net\n\n[TestDriven.Net](http://testdriven.net) is a Visual Studio add-in that enables you to easily run a variety of tests\nwhile working with code in the IDE. Out of the box, TestDriven.Net can run tests written with FsCheck.NUnit.\n\nHowever, the user experience may, by default, be slightly less than optimal. TestDriven.Net outputs the state of the\ntest run in an unobtrusive manner, but if test failures occur, it outputs the result of the failing tests to Visual\nStudio's Output window. If you have Visual Studio configured in such a way that the Output window only appears if there\nactually *is* any output, you may be used to interpret the appearance of the Output window as a test failure.\n\nSince the Output window also appears if anything is written to the console in general, this can produce false\npositives. If you're accustomed to interpret the appearance of the Output window as a sign of a test failure, it can be\na little jarring that FsCheck by default always reports a bit of output on success.\n\nIf, for that, or other reasons, you want to disable output on success, you can do so:\n*)\n\n[<Property(QuietOnSuccess = true)>]\nlet revUnit (x:char) = \n    List.rev [x] = [x]\n\n(**\nSetting `QuietOnSuccess = true` only suppresses the output in case of success; in the case of test failures, output\nappears as normal.\n*)"},{"uri":"https://fscheck.github.io/FsCheck/StatefulTesting.html","title":"Model-based Testing\r\n","content":"(*** hide ***)\n#r @\"../src/FsCheck/bin/Release/netstandard2.0/FsCheck.dll\"\nopen FsCheck\nopen System\n\n(**\n# Model-based Testing\n\nFsCheck also allows you to test objects, which usually encapsulate internal \nstate through a set of methods. FsCheck, through small extension, \nallows you to do model-based specification of a class under test. Consider the following class, \nwith an artificial bug in it:*)\n\ntype Counter() =\n  let mutable n = 0\n  member __.Inc() = n <- n + 1\n  member __.Dec() = if n > 2 then n <- n - 2 else n <- n - 1\n  member __.Get = n\n  member __.Reset() = n <- 0\n  override __.ToString() = sprintf \"Counter=%i\" n\n\n(**\nWe'll elide the class definition in C#, it's very similar.\n\nAs a model to test this class we can use an int value which is an abstraction of the object's internal state. The\nidea is that each operation on the class (in this case, Inc and Dec) affects both the model and the actual object, and \nafter each such operation, the model and the actual instance should still be equivalent.\n\nWith this idea in mind, you can write a specification of the Counter class using an int model as follows (full example\nin C# below):*)\n\nlet spec =\n  let inc = { new Command<Counter, int>() with\n                    override __.RunActual counter = counter.Inc(); counter\n                    override __.RunModel m = m + 1\n                    override __.Post(counter, m) = counter.Get = m |@ sprintf \"model: %i <> %A\" m counter\n                    override __.ToString() = \"inc\" }\n                           \n  let dec = { new Command<Counter, int>() with\n                    override __.RunActual counter = counter.Dec(); counter\n                    override __.RunModel m = m - 1\n                    override __.Post(counter, m) = counter.Get = m |@ sprintf \"model: %i <> %A\" m counter\n                    override __.ToString() = \"dec\" }\n  \n  { new ICommandGenerator<Counter,int> with\n      member __.InitialActual = Counter()\n      member __.InitialModel = 0\n      member __.Next model = Gen.elements [inc;dec] }\n\n(**\nA specification is put together for FsCheck as an object that implementents `ICommandGenerator<'typeUnderTest,'modelType>`. It should return \nan initial object and an initial model of that object; and it should return a generator of `Command` objects.\n\nEach `Command` typically represents one method to call on the object under test, and describes what \nhappens to the model and the object when the command is executed. Also, it can assert preconditions that \nneed to hold before executing the command: FsCheck will not execute that command if the precondition does \nnot hold. It asserts postconditions that should hold after a command is executed: FsCheck \nfails the test if a postcondition does not hold.\n\nPreferably also override ToString in each command so that counterexamples can be printed.\n\nA specification can be checked as follows:*)\n\n(***define-output:spec***)\nCheck.Quick (Command.toProperty spec)\n\n(***include-output:spec***)\n\n(**\nNotice that not only has FsCheck found our 'bug', it has also produced the minimal sequence that leads to it.\n\nFinally, in C#, all this looks as follows:\n\n    [lang=csharp,file=../examples/CSharp.DocSnippets/StatefulTesting.cs,key=counterspec]\n\nAnd to run:\n\n    [lang=csharp,file=../examples/CSharp.DocSnippets/StatefulTesting.cs,key=check]\n\n*)"},{"uri":"https://fscheck.github.io/FsCheck/StatefulTestingNew.html","title":"Model-based Testing (Experimental)\r\n","content":"(*** hide ***)\n#r @\"../src/FsCheck/bin/Release/netstandard2.0/FsCheck.dll\"\nopen FsCheck\nopen FsCheck.Experimental\nopen System\n\n(**\n# Model-based Testing (Experimental)\n\nThere is also a newer, experimental interface to do model-based testing.\n\n*Caveat: since this is in the FsCheck.Experimental namespace for now, the rules of semantic versioning do \nnot apply to this particular part of the API. In other words, minor version releases may break your code.*\n\nLet's look at the following simple class, which has an artificial bug:*)\n\ntype Counter(?initial:int) =\n    let mutable n = defaultArg initial 0\n    member __.Inc() = \n        //silly bug\n        if n <= 3  then n <- n + 1 else n <- n + 2\n        n\n    member __.Dec() = if n <= 0 then failwithf \"Precondition fail\" else n <- n - 1; n\n    member __.Reset() = n <- 0\n    override __.ToString() = sprintf \"Counter = %i\" n\n\n(**\nAs a model to test this class we can use an int value which is an abstraction of the object's internal state. The\nidea is that each operation on the class (in this case, Inc, Dec and Reset) affects both the model object and the actual object, and \nafter each such operation, the model and the actual instance should still be equivalent.\n\nWith this idea in mind, you can write a specification of the Counter class using an int model as follows:*)\n\nlet spec =\n    let inc = \n        { new Operation<Counter,int>() with\n            member __.Run m = m + 1\n            member __.Check (c,m) = \n                let res = c.Inc() \n                m = res \n                |@ sprintf \"Inc: model = %i, actual = %i\" m res\n            override __.ToString() = \"inc\"}\n    let dec = \n        { new Operation<Counter,int>() with\n            member __.Run m = m - 1\n            override __.Pre m = \n                m > 0\n            member __.Check (c,m) = \n                let res = c.Dec()\n                m = res \n                |@ sprintf \"Dec: model = %i, actual = %i\" m res\n            override __.ToString() = \"dec\"}\n    let create initialValue = \n        { new Setup<Counter,int>() with\n            member __.Actual() = new Counter(initialValue)\n            member __.Model() = initialValue }\n    { new Machine<Counter,int>() with\n        member __.Setup = Gen.choose (0,3) |> Gen.map create |> Arb.fromGen\n        member __.Next _ = Gen.elements [ inc; dec ] }\n\n(**\nLet's break this down a bit. A specification is put together as an object that is a subtype of the abstract class `Machine<'TypeUnderTest,'ModelType>`. \nWhat you're actually defining is a state machine which can simultaneously apply operations, or state transitions, to the actual system\nunder test (in this case, a simple object) and a model of the system under test.\n\nThe methods you override on `Machine` are `Setup`, `Next`, and optionally `TearDown`. \n\n`Machine.Setup` is a property that returns an `Arbitrary` instance that generates (and optionally shrinks) a `Setup<'TypeUnderTest, 'ModelType>` object. This in turn has two methods\nto override: `Actual()` which should return a new, fresh instance of the system under test every time it is called, and `Model()` which should return the corresponding\ninstance of the model object each time it is called. In the example, there is only one subclass of `Setup<'Counter,int>` (in more complex cases, there might be more). Our\n`Setup` instance takes as argument the initial counter value, and returns a fresh `Counter` as the SUT. The model is in this case simply the initial value.\n\n`Machine.Next` is a method that takes a model and generates the possible operations that are possible from the state represented by the model. Each operation\nis represented by an `Operation` subclass. \n\n`Operation` has three methods to override: `Run`, `Check` and optionally `Pre`. `Pre` takes a model and returns true\nif and only if this operation can execute on a model in that state - in other words it checks if the precondition for the operation is satisfied. Note that\n`Machine.Next` can also return a reduced set of operations based on the model, which is more efficient, but the preconditions are checked regardless for each \noperation `Next` generates. \n\n`Run` takes a model and returns the new model which is the result of applying this operation to the model. `Check` then takes the new model (as returned from `Run`),\napplies the operation to the actual system under test, and checks whether the result of the SUT matches with the model. The return type of `Check` is Property so\nyou can use the usual FsCheck `Prop` methods to implement this method.\n\nIn the example above there are only two operations that we're checking: `Inc` and `Dec`. The `Run` methods respectively increase and decrease the model. `Check`\ncalls `Inc()` or `Dec()` on the `Counter` instance, and checks that after that the model counter is equal to the real `Counter`. `Dec` in addition has a (quite\nsilly, for demonstration purposes) precondition that the value should be strictly greater than 0 - if we run this machine our `Counter` throws if we call `Dec` \nso when we run this specification we can check that FsCheck does the right thing here (testing the test library, very meta...)\n\nWe also override ToString in each `Operation` so that counter-examples can be printed.\n\nA specification can be checked as follows:*)\n\n(***define-output:spec***)\nCheck.Quick (StateMachine.toProperty spec)\n\n(***include-output:spec***)\n\n(**\nNotice that not only has FsCheck found our 'bug', it has also produced the minimal sequence of operations that leads to it.\n\nBut what has actually happened? Using the generators from the `Machine` methods, FsCheck tries to generate a random sequence of operations, for example: \n\n```\n{Setup = (0, Setup Counter);\n Operations =\n  [(inc, 1); (dec, 0); (inc, 1); (inc, 2); (inc, 3); (inc, 4); (inc, 5);\n   (dec, 4); (dec, 3)];\n TearDown = TearDown Counter;}\n ```\n\n You can read this as a trace of the operations: the counter started off in state `0`, then using operation `inc` when to state `1`, then using operation `dec`\n went to state `0` and so on.\n\n This sequence is first generated using the model only, i.e. no operations are actually applied to any `Counter` objects. After generating a full trace, the operations\n are actually applied to the system under test, using the `Operation.Check` methods of the various `Operation` objects.\n\n If a failing test is found, FsCheck will attempt to remove operations from the sequence of operations, as long as the test still fails. So in the example above,\n although the original sequence contains a few superfluous operations, FsCheck normally finds a shorter if not the shortest sequence that leads to the failure.\n *)"},{"uri":"https://fscheck.github.io/FsCheck/TestData.html","title":"Test data: generators, shrinkers and Arbitrary instances\r\n","content":"(*** hide ***)\n#I @\"../src/FsCheck/bin/Release/netstandard2.0\"\n#r @\"FsCheck\"\nopen FsCheck\nopen System\n\n(**\n# Test data: generators, shrinkers and Arbitrary instances\n\nTest data is produced by test data generators. FsCheck defines default \ngenerators for some often used types, but you can use your own, and \nwill need to define your own generators for any new types you introduce.\n\nGenerators have types of the form `Gen<'a>`; this is a generator for values \nof type a. To build your own generators in F#, a computation expression \ncalled `gen` is provided by FsCheck, and all the functions in the `Gen` module are at your disposal. \nFor C#, there are some LINQ methods you can use (select, where) and a number of methods on the `Gen` class.\nThe name for the methods in F# and C# are largely the same except for casing.\n\nShrinkers have types of the form `'a -> seq<'a>` aka `Func<T,IEnumerable<T>`; given a value, a shrinker \nproduces a sequence of values that are (in some way) smaller than the given value. \nIf FsCheck finds a set of values that falsify a given property, it will try \nto make that value smaller than the original (random) value by getting the \nshrinks for the value and trying each one in turn to check that the property \nis still false. If it is, the smaller value becomes the new counter example \nand the shrinking process continues with that value.\n\nShrinkers have no special support from FsCheck - this is not needed, \nsince you have all you need in `seq` computation expressions and the `Seq` module, or in LINQ and IEnumerable.\n\nFinally, an `Arbitrary<'a>` instance packages a generator and shrinker together to be used in properties. \nFsCheck also allows you to register Arbitrary instances in a `Type` to `Arbitrary` dictionary. \nThis dictionary is used to find an arbitrary instance for properties that have arguments, \nbased on the argument's type.\n\nArbitrary instances have some helper functions in `Arb`.\n    \n## Generators\n\nGenerators are built from the function `choose`,  which makes a random choice of \na value from an interval, with a uniform distribution. For example, to make \na random choice between the elements of a list, use*)\n\nlet chooseFromList xs = \n  gen { let! i = Gen.choose (0, List.length xs-1) \n        return List.item i xs }\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/TestData.cs,key=chooseFrom]\n\n### Choosing between alternatives\n\nA generator may take the form `Gen.oneof <sequence of generators>`\nwhich chooses among the generators in the list with equal probability. For example, \nthis generates a random boolean which is true with probability one half:*)\n\nGen.oneof [ gen { return true }; gen { return false } ]\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/TestData.cs,key=chooseBool]\n\nWe can control the distribution of results using `frequency`\ninstead. `frequency` chooses a generator from the list randomly, but weighs the probability of \nchoosing each alternative by the factor given. For example, this generates true two thirds of the time.*)\n\nGen.frequency [ (2, gen { return true }); (1, gen { return false })]\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/TestData.cs,key=chooseBool2]\n    \n### The size of test data\n\nTest data generators have an implicit size parameter; FsCheck begins by \ngenerating small test cases, and gradually increases the size as testing \nprogresses. Different test data generators interpret the size parameter \nin different ways: some ignore it, while the list generator, for example, \ninterprets it as an upper bound on the length of generated lists. You are \nfree to use it as you wish to control your own test data generators.\n\nYou can obtain the value of the size parameter using `sized`. `sized g` calls `g`, passing it \nthe current size as a parameter. For example, to generate natural\n numbers in the range 0 to size, use*)\n\nGen.sized <| fun s -> Gen.choose (0,s)\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/TestData.cs,key=sizedInt]\n\nThe purpose of size control is to ensure that test cases are large enough to reveal errors, \nwhile remaining small enough to test fast. Sometimes the default size control does not achieve \nthis. For example, towards the end of a test run arbitrary lists may have up to 50 elements, \nso arbitrary lists of lists may have up to 2500, which is too large for efficient testing. In \nsuch cases it can be useful to modify the size parameter explicitly. You can do so using \n`resize`.\n\n`resize n g` invokes generator `g` with size parameter `n`. The size parameter should never be \nnegative. For example, to generate a random matrix it might be appropriate to take the square \nroot of the original size:*)\n\nlet matrix gen = Gen.sized <| fun s -> Gen.resize (s|>float|>sqrt|>int) gen\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/TestData.cs,key=matrixGen]\n\n### Generating recursive data types\n\nGenerators for recursive data types are easy to express using `oneof` or `frequency` to choose \nbetween constructors, and F#'s computation expressions or C# LINQ to form a generator for each case. \nThere are also `map` functions for arity up to 6 to lift constructors and functions into the `Gen` type. \nFor example, if the type of trees is defined by *)\n\ntype Tree = Leaf of int | Branch of Tree * Tree\n\n(**\nthen a generator for trees might be defined by*)\n\nlet rec unsafeTree() = \n  Gen.oneof [ Gen.map Leaf Arb.generate<int> \n              Gen.map2 (fun x y -> Branch (x,y)) (unsafeTree()) (unsafeTree())]\n\n(**\nIn C#, we elide the type because it is quite a bit more verbose than in F# - assume the typical composite\nof having an abstract superclass Tree with two subclasses, one for Leaf and one for Branch. Basically this is\nthe code F# generates for the type definition above. Assuming that, `unsafeTree` in C# looks like:\n\n    [lang=csharp,file=../examples/CSharp.DocSnippets/TestData.cs,key=unsafeTree]\n\nHowever, a recursive generator like this may fail to terminate with a \nStackOverflowException, or produce very large results. To avoid this, \nrecursive generators should always use the size control mechanism:*)\n\nlet tree =\n    let rec tree' s = \n        match s with\n        | 0 -> Gen.map Leaf Arb.generate<int>\n        | n when n>0 -> \n            let subtree = tree' (n/2)\n            Gen.oneof [ Gen.map Leaf Arb.generate<int> \n                        Gen.map2 (fun x y -> Branch (x,y)) subtree subtree]\n        | _ -> invalidArg \"s\" \"Only positive arguments are allowed\"\n    Gen.sized tree'\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/TestData.cs,key=safeTree]\n\nNote that\n\n- We guarantee termination by forcing the result to be a leaf when the size is zero. \n- We halve the size at each recursion, so that the size gives an upper bound on the number of nodes in the tree. We are free to interpret the size as we will. \n- The fact that we share the subtree generator between the two branches of a Branch does not mean that we generate the same tree in each case.\n\n    \n### Useful Generator Combinators\n\nIf `g` is a generator for type `t`, then \n\n- `two g` generates a pair of t's, \n- `three g` generates a triple of t's, \n- `four g` generates a quadruple of t's, \n- If xs is a list, then `elements xs` generates an arbitrary element of xs.\n- If xs is a list, then `growingElements xs` generates an arbitrary element among an initial segment of xs. The size of this initial segment increases with the size parameter.\n- `listOfLength n g` generates a list of exactly n t's. \n- `listOf g` generates a list of t's whose length is determined by the size parameter\n- `nonEmptyListOf g` generates a non-empty list of t's whose length is determined by the size parameter.\n- `constant v` generates the value v.\n- `where p g` or `filter p g` generates t's that satisfy the predicate p. Make sure there is a high chance that the predicate is satisfied.\n- `tryWhere p g` or `tryFilter p g` generates Some t's that satisfy the predicate p, and None if none are found. (After 'trying hard')\n- If xs is a sequence, then `shuffle xs` generates a random permutation of xs.\n\nAll the generator combinators are functions on the Gen module. In C#, the names are the same just capitalized differently.\n\n### Generator examples\n\nThe following examples use `Gen.sample` in order to show example output. In\ngeneral, you shouldn't use `Gen.sample` when writing properties, but it can be\nhelpful when developing or troubleshooting a useful custom generator.\n\nPlease be aware that due to the non-deterministic nature of FsCheck, the output\nof calling `Gen.sample` will, in most cases, differ between calls.\n\nThe `Gen.sample` function takes two arguments, in addition to the generator\nfrom which it samples. The first argument is the [size](#The-size-of-test-data)\nof the generated data. Some generators (like `Gen.constant` and `Gen.elements`)\ndon't use the `size` argument. For these generators, any integer value will do.\n\nThe second argument is the number of sample values to generate. Most examples\nbelow use `Gen.sample` to generate a small list of example values, for example\na list of ten generated values.\n\n#### Constant\n\nThe `Gen.constant` function is perhaps the simplest, and easiest, generator to\nunderstand. Even though it's part of a system that generates random values,\nthis particular generator always returns the same value:*)\n\n(***define-output:ConstantExample***)\nGen.constant (1, \"Foo\") |> Gen.sample 0 10\n\n(**In this example, the constant is a complex value (a tuple); it can also be a\nsimple value, as for example a string or an integer. Since `Gen.constant`\ndoesn't rely on the `size` argument, it's `0` in this example, but any value\nwould do; it wouldn't change the result. As you can see from the return value,\nall singular elements returned is the same tuple.*)\n\n(***include-it:ConstantExample***)\n\n(**Since the purpose of FsCheck is to generate random values, you shouldn't\nneed to use `Gen.constant` often. Still, it can come in handy if you need to\nkeep the value of a particular type constant while you vary other values.\n\n#### Choose\n\nYou can use the `Gen.choose` function to create a generator of singular integer\nvalues between a minimum and maximum value, both inclusive:*)\n\n(***define-output:ChooseBetweenZeroAndNineExample***)\nGen.choose (0, 9) |> Gen.sample 0 10\n\n(**This example generates a single integer value between 0 and 9. Since\n`Gen.choose` doesn't rely on the `size` argument, it's `0` in this example,\nbut any value would do; it wouldn't change the result.\n\nWhile `Gen.choose (0, 9)` generates a single integer value, `Gen.sample 0 10`\ngenerates 10 sample values:*)\n\n(***include-it:ChooseBetweenZeroAndNineExample***)\n\n(**If you supply values in the 'wrong order', `Gen.choose` will follow\n[Postel's law](https://en.wikipedia.org/wiki/Robustness_principle) and 'know\nwhat you meant':*)\n\n(***define-output:ChooseWhenLowIsHigherThanHigh***)\nGen.choose (99, 42) |> Gen.sample 0 10\n\n(**In this example, the first value is greater than the second value, but\n`Gen.choose` will happily interpret this as a range, and produce values between\n42 and 99, both included:*)\n\n(***include-it:ChooseWhenLowIsHigherThanHigh***)\n\n(**Since both values are included, if you set both to the same value, you'll\neffectively constrain the generator to that single value, and it'll behave like\n`Gen.constant`.\n\n#### Elements\n\nYou can use the `Gen.elements` function to create a generator of singular\nvalues drawn from a collection of possible values. The collection is inclusive,\nwhich means that both the first and last element, as well as all elements\nbetween, can be drawn.\n\nIn the following example, a list of arbitrary integers define the collection of\npossible values. The result is a generator that creates `int` values guaranteed\nto be one of these values. Since `Gen.elements` doesn't rely on the `size`\nargument, it's `0` in this example, but any value would do; it wouldn't change\nthe result.*)\n\n(***define-output:ElementsExample***)\nGen.elements [42; 1337; 7; -100; 1453; -273] |> Gen.sample 0 10\n\n(**The result of this expression is a list of ten sample values. Each value is\na single integer drawn from the collection of numbers:*)\n\n(***include-it:ElementsExample***)\n\n(**All elements are equally likely to be drawn from the collection; we say that\nthe random function has a uniform distribution. One easy way to affect the\ndistribution is to put more than one identical element into the collection:*)\n\n(***define-output:SkewedElementsExample***)\nGen.elements [\"foo\"; \"foo\"; \"bar\"] |> Gen.sample 0 10\n\n(**In the above example, the value `\"foo\"` appears twice, so is twice as likely\nto be drawn from the collection:*)\n\n(***include-it:SkewedElementsExample***)\n\n(**The above examples all use `list` values as input, but you can use any `seq`\nexpression, including `list` and `array` values, as long as the sequence is\nfinite.\n\n#### GrowingElements\n\nEssentially `Gen.growingElements` is like `Gen.elements` but also taking `size` into account.\n\nYou can use the `Gen.growingElements` function to create a generator of singular\nvalues drawn *among an initial segment* of possible values. The size of this\ninitial segment increases with the `size` parameter.\n\nIn the following example, a list of ten characters define the collection of\npossible values. The result is a generator that creates `char` values guaranteed\nto be one of these values. Since `Gen.growingElements` relies on the `size`\nargument, it's `3` in this example, which means only values from the segment\n`['a'; 'b'; 'c']` will be returned.*)\n\n(***define-output:GrowingElementsExample***)\nGen.growingElements ['a'; 'b'; 'c'; 'd'; 'e'; 'f'; 'g'; 'h'; 'i'; 'j'] |> Gen.sample 3 10\n\n(**The result of this expression is a list of ten sample values. Each value is\na single character drawn from the segment `['a'; 'b'; 'c']`:*)\n\n(***include-it:GrowingElementsExample***)\n\n(**Let's run `Gen.growingElements` again, with the same input but with size `7`:*)\n\n(***define-output:GrowingElementsAnotherExample***)\nGen.growingElements ['a'; 'b'; 'c'; 'd'; 'e'; 'f'; 'g'; 'h'; 'i'; 'j'] |> Gen.sample 7 10\n\n(**The result of this expression is a list of ten sample values. Each value is\nnow a single character drawn from the segment `['a'; 'b'; 'c'; 'd'; 'e'; 'f'; 'g']`:*)\n\n(***include-it:GrowingElementsAnotherExample***)\n\n(**The above examples all use `list` values as input, but you can use any `seq`\nexpression, including `list` and `array` values, as long as the sequence is\nfinite.\n\n#### Map\n\nSometimes, you need to use a generator of one type in order to create a\ngenerator of another type. For instance, you may need a `byte` value between 0\nand 127. That sounds just like a job for `Gen.choose`, but unfortunately,\n`Gen.choose (0, 127)` is a `Gen<int>`, and not a `Gen<byte>`. One way to\nproduce a `Gen<byte>` from a `Gen<int>` is to use `Gen.map`:*)\n\n(***define-output:IntToByteMapExample***)\nGen.choose (0, 127) |> Gen.map byte |> Gen.sample 0 10\n\n(**This example uses the `byte` _function_ to cast any `int` created by\n`Gen.choose (0, 127)` to a `byte` value:*)\n\n(***include-it:IntToByteMapExample***)\n\n(**This is only a basic example of the concept of `Gen.map`. In this particular\nexample, you could also have used `Gen.elements [0uy..127uy]` to achieve the\nsame result without using `Gen.map`, so let's consider a second\nexample.\n\nAssume that you need to create a date in a particular month; e.g. November\n2019. You can do that by creating an integer for the day of the month, and then\ncombine `Gen.map` with an anymous function to get the desired date:*)\n\n(***define-output:MapIntToDateExample***)\nGen.choose (1, 30)\n|> Gen.map (fun i -> DateTime(2019, 11, i).ToString \"u\")\n|> Gen.sample 0 10\n\n(**In this example, the generated `DateTime` value is immediately formatted as\na `string`, so that the output is more readable:*)\n\n(***include-it:MapIntToDateExample***)\n\n(**This causes the resulting generator to have the type `Gen<string>`, but if\nyou omit calling `ToString \"u\"`, its type would have been `Gen<DateTime>`.\n\n#### Lists\n\nYou can generate lists from individual value generators using `Gen.listOf`,\n`Gen.listOfLength`, and `Gen.nonEmptyListOf`. These functions are\n*combinators*, which means that they don't generate individual values\nthemselves, but rather use another generator to build values. For instance,\nyou can use `Gen.constant` to generate lists that all contain the same value:*)\n\n(***define-output:ConstantListOfExample***)\nGen.constant 42 |> Gen.listOf |> Gen.sample 1 10\n\n(**This combination uses `Gen.constant 42` as an individual generator, and then\ngenerates lists containing the the number 42. While the value(s) in the list is\nalways 42, the length of the generated lists varies.*)\n\n(***include-it:ConstantListOfExample***)\n\n(**The length of the generated list is determined by the `size` argument. In\nthis example, the `size` argument is `1`, so the generated lists are short.\nNote that while there's a correlation beteen `size` and the length of the\nlists, you can't rely on a deterministic length. For that, there's\n`Gen.listOfLength`:*)\n\n(***define-output:ListOfLengthExample***)\nGen.choose (24, 42) |> Gen.listOfLength 5 |> Gen.sample 0 10\n\n(**This example uses `Gen.choose (24, 42)` in order to generate individual\ninteger values between 24 and 42. It then pipes this generator into\n`Gen.listOfLength 5` in order to generate lists with exactly five elements:*)\n\n(***include-it:ListOfLengthExample***)\n\n(**Notice that all sample lists have exactly five elements.\n\nYou can also use `Gen.nonEmptyListOf` to create lists that are guaranteed to\nhave at least one element. Like the other list generators, it uses a\nsingle-value generator to generate its elements:*)\n\n(***define-output:NonEmptyListExample***)\nGen.elements [\"foo\"; \"bar\"; \"baz\"] |> Gen.nonEmptyListOf |> Gen.sample 20 4\n\n(**Like `Gen.listOf`, `Gen.nonEmptyListOf` uses `size` to control the length\nof the generated lists. They may still be small, but the larger the `size`\nargument, the larger the lists may become.*)\n\n(***include-it:NonEmptyListExample***)\n\n(**In this example, each element is drawn from the small set \"foo\", \"bar\", and\n\"baz\". The lists are guaranteed to have at least a single element, but may be\nlonger.\n\n#### Shuffle\n\nYou can use the `Gen.shuffle` function to create a generator that generates a\nrandom permutation of a given finite sequence.\n\nIn the following example, the\n[metasyntactic variables](https://en.wikipedia.org/wiki/Metasyntactic_variable)\n\"foo\", \"bar\", \"baz\", and \"qux\" define the input sequence:*)\n\n(***define-output:ShuffleExample***)\nGen.shuffle [\"foo\"; \"bar\"; \"baz\"; \"qux\"] |> Gen.sample 0 6\n\n(**Since `Gen.shuffle` doesn't rely on the `size` argument, it's `0` in this\nexample, but any value would do; it wouldn't change the result.\n\nThe result of this expression is a list of lists, where each list contains\nthe original input list, but shuffled:*)\n\n(***include-it:ShuffleExample***)\n\n(**The above example uses a `list` value as input, but you can use any `seq`\nexpression, including `list` and `array` values, as long as the sequence is\nfinite.\n\nAll shuffles are equally likely; the input order isn't excluded, so the\noutput may be the same as the input. Due to the nature of combinatorics, this\nis more likely to happen the smaller the input list is.\n\n#### Tuples\n\nSometimes you need to generate tuples of values. You can use the functions\n`Gen.two`, `Gen.three`, and `Gen.four` to turn a single-value generator into a\ngenerator of tuples.\n\nImagine that you need to generate two-dimensional points; you may, for\ninstance, be implementing\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life).\nPoints can be modelled as tuples of numbers. If you're modelling a grid, you\ncan use integers:*)\n\n(***define-output:GenTwoIntegerExample***)\nGen.choose (-100, 100) |> Gen.two |> Gen.sample 0 10\n\n(**`Gen.two` uses a single-value generator to create a generator of two-element\ntuples. This example generates 10 sample points, where each coordinate is\nbetween -100 and 100:*)\n\n(***include-it:GenTwoIntegerExample***)\n\n(**If you want to model a coordinate system in three-dimensional space, you may\ndecide to use floating points instead:*)\n\n(***define-output:GenThreeFloatExample***)\nGen.elements [-10.0..0.01..10.0] |> Gen.three |> Gen.sample 0 10\n\n(**In this example, you first use `Gen.elements` to draw a floating point value\nfrom between -10 and 10, with two decimals; that defines a `Gen<float>`.\nSecond, `Gen.three` takes that `Gen<float>` and turns it into a\n`Gen<float * float * float>`:*)\n\n(***include-it:GenThreeFloatExample***)\n\n(**Finally, `Gen.four` transforms a single-value generator into a generator of\nfour-element tuples. As all the other *combinators* in the `Gen` module, you\ncan combine it with other functions to define more specific values. Imagine,\nfor instance, that you need to create `System.Version` values. This type, which\ncaptures a version of something, for example an operating system, or a library,\nmodels version numbers as a composite of four numbers: *major*, *minor*,\n*build*, and *revision* - all integers. One of the constructor overloads of\nthis class takes all four numbers, so you can combine `Gen.four` with `Gen.map`\nto create Version values:*)\n\n(***define-output:GenFourVersionExample***)\nGen.choose (0, 9)\n|> Gen.four\n|> Gen.map (System.Version >> string)\n|> Gen.sample 0 10\n\n(**This example starts with `Gen.choose (0, 9)` to define a `Gen<int>` that\ncreates integer values betwen 0 and 9 (both included). Second, you pipe the\n`Gen<int>` value into `Gen.four`, which returns a `Gen<int * int * int * int>`.\nThird, you can pipe that generator into `Gen.map`, using the constructor\noverload of `Version` that takes four integers; in F# 4, constructors can be\ntreated as functions, and a constructor with four arguments can be treated as a\nfunction that takes a four-element tuple.*)\n\n(***include-it:GenFourVersionExample***)\n\n(**This example composes the `Version` constructor with the `string` function,\nin order to produce a more readable output. The resulting generator has the\ntype `Gen<string>`, but if you remove the `string` composition, the type would\nbe `Gen<Version>.`\n\n#### Filter\n\nWhile you can use the above generators and combinators to define various custom\nrules for generating values, occasionally you have a requirement where the\neasiest solution is to throw away some generated candidates. `Gen.filter` gives\nyou that opportunity.\n\nImagine, for example, that you have to create lists with two elements, but with\nthe restriction that the two elements must be different. One way to do that\ncould be to first generate a pair of values, and then use `Gen.filter` to\nremove all pairs where the elements are equal. Subsequently, you can use\n`Gen.map` to convert the pair to a list:*)\n\n(***define-output:GenFilterExample***)\nGen.choose (1, 100)\n|> Gen.two\n|> Gen.filter (fun (x, y) -> x <> y)\n|> Gen.map (fun (x, y) -> [x; y])\n|> Gen.sample 0 10\n\n(**This expression generates 10 sample lists, each containing two different\nnumbers:*)\n\n(***include-it:GenFilterExample***)\n\n(**When using `Gen.filter`, be sure to provide a predicate with a high chance\nof returning `true`. If the predicate discards 'too many' candidates, it may\ncause tests to run slower, or to not terminate at all. If your filter is\naggressive, consider using `Gen.tryFilter` instead of `Gen.filter`.\n    \n## Default Generators and Shrinkers based on type\n\nFsCheck defines default test data generators and shrinkers for some often used types, for example\nunit, bool, byte, int, float, char, string, DateTime, lists, array 1D and 2D, Set, Map, objects and \nfunctions from and to any of the above. Furthermore, by using reflection, FsCheck can derive \ndefault implementations of record types, discriminated unions, tuples, enums and basic classes in terms \nof any primitive types that are defined (either in FsCheck or by you).\n\nYou do not need to define these explicity for every property: FsCheck can provide a property with \nappropriate generators and shrinkers for all of the property's arguments, if it knows them or \ncan derive them. Usually you can let type inference do the job of finding out these types \nbased on your properties. However if you want to coerce FsCheck to use a particular generator \nand shrinker, you can do so by providing the appropriate type annotations.\n\nFsCheck packages a generator and shrinker for a particular type in an `Arbitrary` type. You can \nprovide FsCheck with an Arbitrary instance for your own types, by defining static members that \nreturn an instance of a subclass of `Arbitrary<'a>`:*)\n\ntype MyGenerators =\n  static member Tree() =\n      {new Arbitrary<Tree>() with\n          override x.Generator = tree\n          override x.Shrinker t = Seq.empty }\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/TestData.cs,key=MyGenerators]\n\nReplace the `'a` by the particular type you are defining an Arbitary instance for. \nOnly the `Generator` method needs to be defined; `Shrinker` by default returns the empty \nsequence which means no shrinking will be done for this type).\n\nAs the F# code shows, you can create your own subclass of Arbitrary and return that, or you can use one of the `Arb.from`\nmethods or functions.\n\nNow, to register all Arbitrary instances in this class:*)\n\nArb.register<MyGenerators>()\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/TestData.cs,key=register]\n\nFsCheck now knows about `Tree` types, and can not only generate Tree values, but also e.g. lists, tuples and \noption values containing Trees:*)\n\n(***define-output:RevRevTree***)\nlet revRevTree (xs:list<Tree>) = \n  List.rev(List.rev xs) = xs\nCheck.Quick revRevTree\n\n(***include-output:RevRevTree***)\n\n(**\nTo generate types with a generic type argument, e.g.*)\n\ntype Box<'a> = Whitebox of 'a | Blackbox of 'a\n\n(**\nyou can use the same principle. So the class `MyGenerators` can be writtten as follows:*)\n\nlet boxGen<'a> : Gen<Box<'a>> = \n    gen { let! a = Arb.generate<'a>\n          return! Gen.elements [ Whitebox a; Blackbox a] }\n\ntype MyTreeGenerator =\n    static member Tree() =\n        {new Arbitrary<Tree>() with\n            override x.Generator = tree\n            override x.Shrinker t = Seq.empty }\n    static member Box() = Arb.fromGen boxGen\n\n(**\nNotice that we use the function `generate<'a>` from the Arb module to get the generator \nfor the type argument of `Box`. This allows you to define generators recursively. Similarly, there is \na function `shrink<'a>`. Look at the FsCheck source for examples of default Arbitrary implementations \nto get a feeling of how to write such Arbitrary instances. The Arb module should help you with this task as well.\n\nNow, the following property can be checked:*)\n\n(***define-output:RevRevBox***)\nlet revRevBox (xs:list<Box<int>>) = \n  List.rev(List.rev xs) = xs\nCheck.Quick revRevBox\n\n(***include-output:RevRevBox***)\n\n(**\nNote that the class needs not be tagged with attributes in any way. FsCheck determines the type of \nthe generator by the return type of each static member.\n\nAlso note that in this case we actually didn't need to write a generator or shrinker: FsCheck can \nderive suitable instances using reflection for discriminated unions, record types and enums.\n\n### Notes about the default Generators and Shrinkers\n\nMost of the default Arbitrary instances are documented with xml comments that can be discovered via IntelliSense.\nHowever, there are some important things to notice that are listed here to avoid much duplicating comments.\n\n- Most of the default sized generators of the number-like types produce the uniformly distributed values in the ranges specified in the comments.\n- The same thing with the default DoNotSize generators of the number-like types except Decimal.\n- Most of the default generators of the collection types are just \"wrappers\" around the F# list. Thus, you can assume that they are generated and shrinked the same way.\n    \n## Useful methods on the Arb module\n\n- `Arb.from<'a>` returns the registered Arbitrary instance for the given type 'a\n- `Arb.fromGen` makes a new Arbitrary instance from just a given generator - the shrinker return the empty sequence\n- `Arb.fromGenShrink` make a new Arbitrary instance from a given generator and shrinker. This is equivalent to implementing Arbitrary yourself, but may be shorter.\n- `Arb.generate<'a>` returns the generator of the registered Arbitrary instance for the given type 'a\n- `Arb.shrink` return the immediate shrinks of the registered Arbitrary instance for the given value\n- `Arb.convert` given conversion functions to ('a ->'b) and from ('b ->'a), converts an Arbitrary<'a> instance to an Arbitrary<'b>\n- `Arb.filter` filters the generator and shrinker for a given Arbitrary instance to contain only those values that match with the given filter function\n- `Arb.mapFilter` maps the generator and filter the shrinkers for a given Arbitrary instance. Mapping the generator is sometimes faster, e.g. for a PositiveInt it is faster to take the absolute value than to filter the negative values.\n- `Arb.Default` is a type that contains all the default Arbitrary instances as they are shipped and registerd by FsCheck by default. This is useful when you override a default generator - typically this is because you want to filter certain values from it, and then you need to be able to refer to the default generator in your overriding generator.*)"},{"uri":"https://fscheck.github.io/FsCheck/TipsAndTricks.html","title":"Tips and Tricks\r\n","content":"(*** hide ***)\n#I @\"../src/FsCheck/bin/Release/netstandard2.0\"\n#r @\"FsCheck\"\nopen FsCheck\nopen System\n\n(**\n# Tips and Tricks\n    \n## Properties of functions\n\nPerhaps surprisingly, FsCheck can generate random functions, `Func` and `Action`s. As a result, it can check properties of \nfunctions. For example, we can check associativity of function composition as follows:*)\n\n(***define-output:associativity***)\nlet associativity (x:int) (f:int->float,g:float->char,h:char->int) = ((f >> g) >> h) x = (f >> (g >> h)) x\nCheck.Quick associativity\n\n(***include-output:associativity***)\n\n(**\nFsCheck can generate all functions with a target type that it can generate. In addition, the functions are pure and total -\nthe former means that if you give a generated function the same value as input, it will keep returning that same value as output,\nno matter how many times you call it. The latter means that the function does not throw any exceptions and always terminates.\n\nIf a counter-example is found, function values will be displayed as `<func>`. However, FsCheck can show \nyou the generated function in more detail, if you ask it to generate a `Function` type, which has an embedded \"real\" function. \nFsCheck can even shrink `Function`s. For example:*)\n\n(***define-output:mapRec***)\nlet mapRec (Fun f) (l:list<int>) =\n  not l.IsEmpty ==>\n      lazy (List.map f l = ((*f <|*) List.head l) :: List.map f (List.tail l))\nCheck.Quick mapRec\n\n(***include-output:mapRec***)\n\n(**\nThe type `Function<'a,'b>` - here deconstructed using the single case active pattern `Fun` - \nrecords a map of all the arguments it was called with, and the result it produced. \nIn your properties, you can extract the actual function by pattern matching as in the example. \n`Function` is used to print the function, and also to shrink it.\n    \n## Use pattern matching instead of forAll to use custom generators\n\nTo define a generator that generates a subset of the normal range of values for an existing type,\nsay all the even ints, it makes properties more readable if you define a single-case union\ncase, and register a generator for the new type:\n*)\n\n(***define-output:EvenInt***)\ntype EvenInt = EvenInt of int with\n  static member op_Explicit(EvenInt i) = i\n\ntype ArbitraryModifiers =\n    static member EvenInt() = \n        Arb.from<int> \n        |> Arb.filter (fun i -> i % 2 = 0) \n        |> Arb.convert EvenInt int\n        \nArb.register<ArbitraryModifiers>()\n\nlet ``generated even ints should be even`` (EvenInt i) = i % 2 = 0\nCheck.Quick ``generated even ints should be even``\n\n(***include-output:EvenInt***)\n\n(**\nIt's now easy to define custom shrink functions as well.\n\nFsCheck uses this pattern frequently, e.g. `NonNegativeInt`, `PositiveInt`, `StringWithoutNullChars` etc. See the\ndefault Arbitrary instances on the `Arb.Default` type.\n\nAlso, for these kinds of generators, the `Arb.filter`, `Arb.convert` and `Arb.mapFilter` functions will come in handy.\n  \n## An equality comparison that prints the left and right sides of the equality\n\nProperties commonly check for equality. If a test case fails, FsCheck prints the counterexample, but \nsometimes it is useful to print the left and right side of the comparison, especially if you \ndo some complicated calculations with the generated arguments first. To make this easier, you can \ndefine your own labelling equality combinator:*)\n\n(***define-output:testCompare***)\nlet (.=.) left right = left = right |@ sprintf \"%A = %A\" left right\n\nlet testCompare (i:int) (j:int) = 2*i+1  .=. 2*j-1\nCheck.Quick testCompare\n\n(***include-output:testCompare***)\n\n(**\nOf course, you can do this for any operator or function that you often use.\n    \n## Some ways to run FsCheck tests\n\n* By adding properties and generators to an fsx file in your project. It's easy to execute, just press \nctrl-a and alt-enter, and the results are displayed in F# Interactive. Be careful when referencing dlls \nthat are built in your solution; Versions of F# Interactive earlier than 3.1.2 will lock those for the remainder of the session, \nand you won't be able to build until you quit the session. One solution is to include the source files \ninstead of the dlls, but that makes the process slower. Useful for smaller projects. Difficult to debug though.\n* By making a separate console application. Easy to debug, and no annoying locks on assemblies. Your best option \nif you use only FsCheck for testing and your properties span multiple assemblies.\n* By using another unit testing framework. Useful if you have a mixed FsCheck/unit testing approach \n(some things are easier to check using unit tests, and vice versa), and you like a graphical runner. \nDepending on what unit testing framework you use, you may get good integration with Visual Studio for free. Also have a look\nat some of the existing integrations with test runners like Xunit.NET, NUnit, Fuchu.\n\n## Testing mutable types without using Command or StateMachine\n\nFor some relatively simple mutable types you might feel more comfortable just writing straightforward FsCheck properties without\nusing the `Command` or `StateMachine` API. This is certainly possible, but for shrinking FsCheck assumes that it can\nre-execute the same test multiple times without the inputs changing. If you call methods or set properties on a generated object\nthat affect its state, this assumption does not hold and you'll see some weird results.\n\nThe simplest way to work around this is not to write a generator for your mutable object at all, but instead write an FsCheck property\nthat takes all the values necessary to construct the object, and then simply construct the object in the beginning of your test. For example, suppose we want to test\na mutable list:*)\n\nlet testMutableList =\n    Prop.forAll (Arb.fromGen(Gen.choose (1,10))) (fun capacity -> \n        let underTest = new System.Collections.Generic.List<int>(capacity)\n        Prop.forAll Arb.from<int[]> (fun itemsToAdd ->\n            underTest.AddRange(itemsToAdd)\n            underTest.Count = itemsToAdd.Length))\n\n(**\n    [lang=csharp,file=../examples/CSharp.DocSnippets/TipsAndTricks.cs,key=testMutableList]\n\nThis works, as a bonus you get shrinking for free.\n\nIf you do want to write a generator for your mutable type, this can be made to work but if\nyou mutate a generated object during a test, either:\n\n* Disable shrinking, typically by wrapping all types into `DontShrink`; or\n* Clone or otherwise 'reset' the generated mutable object at the beginning or end of every test.\n\n## Replaying a failed test\n\nWhen you have a failed test, it's often useful for debugging to be able to replay exactly those inputs. For this reason, FsCheck displays the\nseed of its pseudo-random number generator when a test fails. Look for the bit of text that looks like: `(StdGen (1145655947,296144285))`.\n\nTo replay this test, which should have the exact same output, use the `Replay` field on `Config`:*)\n\nCheck.One({ Config.Quick with Replay = Some <| Random.StdGen (1145655947,296144285) }, fun x -> abs x >= 0)\n\n(**\nIn C#:\n\n    [lang=csharp,file=../examples/CSharp.DocSnippets/TipsAndTricks.cs,key=replay]\n*)"},{"uri":"https://fscheck.github.io/FsCheck/users.html","title":"Who is using FsCheck?\r\n","content":"# Who is using FsCheck?\r\n\r\nPlease send a pull request if you want to be added.\r\n\r\n* [Fantomas](https://github.com/dungpa/fantomas)\r\n* [fsharpx](https://github.com/fsharp/fsharpx)\r\n* [FsPickler](https://github.com/nessos/FsPickler)\r\n* [LinqOptimizer](https://github.com/nessos/LinqOptimizer)\r\n* [Credit Suisse](http://www.credit-suisse.com)\r\n* [BlueMountain Capital](https://github.com/bluemountaincapital)\r\n* [Tachyus](http://tachyus.com/)\r\n* [Fred](https://github.com/frankshearar/Fred/)\r\n* [Digital Furnace Games](http://www.digitalfurnacegames.com/)\r\n* [15below](http://15below.com/)\r\n* [AntaniXml](http://giacomociti.github.io/AntaniXml/)\r\n* [DoctestInteractive](https://github.com/tomakita/DoctestInteractive/)\r\n\r\n## Academia\r\n\r\nYes, to my surprise people are writing academic papers about FsCheck. Well, at least one!\r\n\r\n* Bernhard K. Aichernig and Richard Schumi. Property-based Testing with FsCheck by Deriving \r\nProperties from Business Rule Models. In 2016 IEEE Ninth International Conference on Software\r\nTesting, Verification, and Validation Workshops (ICSTW), 13th Workshop on Advances in Model \r\nBased Testing (A-MOST 2016), IEEE,  2016. In press. [Link](http://truconf.ist.tugraz.at/index.php/2016/03/04/publication-at-a-most-2016/)\r\n"}]